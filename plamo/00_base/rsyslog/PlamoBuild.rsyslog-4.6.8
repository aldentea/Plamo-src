#!/bin/sh
##############################################################
url='http://download.rsyslog.com/rsyslog/rsyslog-4.6.8.tar.gz'
pkgbase=rsyslog
vers=4.6.8
arch=x86_64
# arch=i586
build=P3
src=rsyslog-4.6.8
OPT_CONFIG='--sbindir=/sbin'
DOCS='AUTHORS COPYING COPYING.LESSER ChangeLog INSTALL NEWS README'
patchfiles=''
compress=txz
##############################################################

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_all() {
  for chk in `find . ` ; do
    chk_elf=`file $chk | grep ELF`
    if [ "$chk_elf.x" != ".x" ]; then
      chk_lib=`echo $chk | grep lib`
      if [ "$chk_lib.x" != ".x" ]; then
         echo "stripping $chk with -g "
         strip -g $chk
      else
         echo "stripping $chk"
         strip $chk
      fi
    fi
  done
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    # files=`ls -a --indicator-style=none | tail -n+3`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress_all() {
  cd $P
  strip_all
}  

W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} ; B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
xmandir=$P/usr/X11R7/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build

if [ $arch = "x86_64" ]; then
    target="-m64"
    libdir="lib64"
else
    target="-m32"
    libdir="lib"
fi

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then wget $i ; fi
  done
  for i in $url ; do
    case ${i##*.} in
    tar) tar xvpf ${i##*/} ;;
    gz) tar xvpzf ${i##*/} ;;
    bz2) tar xvpjf ${i##*/} ;;
    esac
  done
fi
if [ $opt_config -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  done
######################################################################
# * ./configure を行う前に適用したい設定やパッチなどがある場合はここに
#   記述します。
######################################################################
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for patch in $patchfiles ; do
       patch -p1 < $W/$patch
    done

    #if [ -f autogen.sh ] ; then
    #  sh ./autogen.sh
    #fi

    if [ -x configure ] ; then
       export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
       export LDFLAGS='-Wl,--as-needed' 
        CC="gcc -isystem /usr/include $target" CXX="g++ -isystem /usr/include $target " \
          ./configure --prefix=/usr --libdir=/usr/${libdir} --sysconfdir=/etc --localstatedir=/var --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]}
      if [ $? != 0 ]; then
	  echo "configure error. $0 script stop"
	  exit 255
      fi
    fi
  done
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      export LDFLAGS='-Wl,--as-needed'
      make -j3
    fi
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for mk in `find . -name "[Mm]akefile" ` ; do
        sed -i -e 's|GCONFTOOL = /usr/bin/gconftool-2|GCONFTOOL = echo|' $mk
    done
    if [ -f Makefile ] ; then
      export LDFLAGS='-Wl,--as-needed'
      make install DESTDIR=$P
    fi
    install -dv $P/etc/rsyslog.d
    install -dv $P/etc/logrotate.d
  done
######################################################################
# * make install でコピーされないファイルがある場合はここに記述します。
######################################################################
cat > $P/etc/rsyslog.conf << "EOF"
# Begin /etc/rsyslog.conf
# CLFS configuration of rsyslog. For more info use man rsyslog.conf

#######################################################################
# Rsyslog Modules

# Support for Local System Logging
$ModLoad imuxsock.so

# Support for Kernel Logging
$ModLoad imklog.so

#######################################################################
# Global Options

# Use traditional timestamp format.
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# Set the default permissions for all log files.
$FileOwner root
$FileGroup root
$FileCreateMode 0640
$DirCreateMode 0755

# Provides UDP reception
$ModLoad imudp
$UDPServerRun 514

# Disable Repeating of Entries
$RepeatedMsgReduction on

#######################################################################
# Include Rsyslog Config Snippets

$IncludeConfig /etc/rsyslog.d/*.conf

#######################################################################
# Standard Log Files

auth,authpriv.*                 /var/log/auth.log
*.*;auth,authpriv.none          -/var/log/syslog
daemon.*                        -/var/log/daemon
kern.*                          -/var/log/kern.log
mail.*                          -/var/log/mail.log
user.*                          -/var/log/user.log

# Catch All Logs
*.=debug;\
        auth,authpriv.none;\
        news.none;mail.none     -/var/log/debug
*.=info;*.=notice;*.=warn;\
        auth,authpriv.none;\
        cron,daemon.none;\
        mail,news.none          -/var/log/messages

# Emergencies are shown to everyone
*.emerg                         *

# End /etc/rsyslog.conf
EOF

cat <<"EOF" > $P/etc/logrotate.d/auth.log
/var/log/auth.log {
    compress
    weekly
    rotate 8
    missingok
    notifempty
    sharedscripts
    postrotate
        /bin/kill -HUP `cat /var/run/rsyslogd.pid` 2>/dev/null || true
    endscript
}
EOF

cat <<"EOF" > $P/etc/logrotate.d/syslog
/var/log/syslog {
    compress
    weekly
    rotate 8
    missingok
    notifempty
    sharedscripts
    postrotate
        /bin/kill -HUP `cat /var/run/rsyslogd.pid` 2>/dev/null || true
    endscript
}
EOF

cat <<"EOF" > $P/etc/logrotate.d/daemon
/var/log/daemon {
    compress
    weekly
    rotate 4
    missingok
    notifempty
    sharedscripts
    postrotate
        /bin/kill -HUP `cat /var/run/rsyslogd.pid` 2>/dev/null || true
    endscript
}
EOF

cat <<"EOF" > $P/etc/logrotate.d/kern.log
 /var/log/kern.log {
    compress
    weekly
    rotate 4
    missingok
    notifempty
    sharedscripts
    postrotate
        /bin/kill -HUP `cat /var/run/rsyslogd.pid` 2>/dev/null || true
    endscript
}
EOF

cat <<"EOF" > $P/etc/logrotate.d/mail.log
/var/log/mail.log {
    compress
    weekly
    rotate 4
    missingok
    notifempty
    sharedscripts
    postrotate
        /etc/rc.d/init.d/postfix reload 2> /dev/null || true
    endscript
}
EOF

cat <<"EOF" > $P/etc/logrotate.d/user.log
/var/log/user.log {
    compress
    weekly
    rotate 4
    missingok
    notifempty
    sharedscripts
    postrotate
        /bin/kill -HUP `cat /var/run/rsyslogd.pid` 2>/dev/null || true
    endscript
}
EOF

cat <<"EOF" > $P/etc/logrotate.d/debug
/var/log/debug {
    compress
    weekly
    rotate 4
    missingok
    notifempty
    sharedscripts
    postrotate
        /bin/kill -HUP `cat /var/run/rsyslogd.pid` 2>/dev/null || true
    endscript
}
EOF

cat <<"EOF" > $P/etc/logrotate.d/messages
/var/log/messages {
    compress
    weekly
    rotate 4
    missingok
    notifempty
    sharedscripts
    postrotate
        /bin/kill -HUP `cat /var/run/rsyslogd.pid` 2>/dev/null || true
    endscript
}
EOF

# remove locales except ja
# 
  if [ -d $P/usr/share/locale ]; then
    pushd $P/usr/share/locale  
    for loc in * ; do
        if [ "$loc" != "ja" ]; then
            rm -rf $P/usr/share/locale/$loc
        fi
    done
    popd
  fi

######################################################################
# path に lib があるバイナリは strip -g, ないバイナリは strip する
######################################################################
  cd $P
  compress_all
  if [ -d $P/usr/share/man ]; then
      for mdir in `find $P/usr/share/man -name man[0-9mno] -type d`; do
          gzip_dir $mdir
      done
  fi
######################################################################
# * compress 対象以外で圧縮したいディレクトリやファイルがある場合はここ
#   に記述します(strip_{bin,lib}dir や gzip_{dir,one} を使います)。
# * 他のアーカイブから追加したいファイルがある場合はここに記述します。
######################################################################
  cd $W
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      touch -t `date '+%m%d0900'` $docdir/$src/$myname
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done

  for patch in $patchfiles ; do
      cp $W/$patch $docdir/$src/$patch
      gzip_one $docdir/$src/$patch
  done
############################################################
#   /usr/share/doc 以下には一般ユーザのIDのままのファイルが
#   紛れこみがちなので
############################################################

  chk_me=`whoami | grep root`
  if [ "$chk_me.x" != ".x" ]; then
      chown -R root.root $P/usr/share/doc
  fi

######################################################################
# * convert 対象以外で刈り取りたいシンボリックリンクがある場合はここに
#   記述します(prune_symlink を使います)。
# * 完成した作業ディレクトリから tar イメージを作成する手順を以降に記述
#   します(こだわりを求めないなら単に makepkg でも良いです)。
######################################################################
# tar cvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
# tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
# tar rvpf $pkg.tar -C $P usr/share/doc/$src
# touch -t `date '+%m%d0900'` $pkg.tar ; gzip $pkg.tar ; touch $pkg.tar.gz
# mv $pkg.tar.gz $pkg.tgz
  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
