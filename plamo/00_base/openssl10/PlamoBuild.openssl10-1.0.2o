#!/bin/sh
##############################################################
pkgbase='openssl10'
vers='1.0.2o'
url="https://openssl.org/source/openssl-${vers}.tar.gz"
verify="${url}.asc"
arch=`uname -m`
build=B1
src="openssl-${vers}"
OPT_CONFIG="--openssldir=/etc/ssl shared zlib-dynamic"
DOCS='INSTALL INSTALL.DJGPP INSTALL.MacOS INSTALL.NW INSTALL.OS2 INSTALL.VMS INSTALL.W32 INSTALL.W64 INSTALL.WCE LICENSE NEWS README README.ASN1 README.ENGINE install.com'
blfs_patch_url="http://www.linuxfromscratch.org/patches/blfs/svn/openssl-${vers}-compat_versioned_symbols-1.patch"
patchfiles="${blfs_patch_url##*/}"
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  download_sources
  if [ ! -f ${blfs_patch_url##*/} ]; then
    wget $blfs_patch_url
  fi
fi

if [ $opt_config -eq 1 ] ; then
  if [ -d $B ] ; then rm -rf $B ; fi ; cp -a $S $B
######################################################################
#  copy sources into build directory, patch and make in the build dir
######################################################################
  cd $B
  for patch in $patchfiles ; do
    patch -p1 < $W/$patch
  done

  # if [ -f autogen.sh ] ; then
  #   sh ./autogen.sh
  # fi
  export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
  export LDFLAGS='-Wl,--as-needed' 
  ./config --prefix=/usr --libdir=${libdir}/openssl-1.0 ${OPT_CONFIG}
    
  if [ $? != 0 ]; then
    echo "configure error. $0 script stop"
    exit 255
  fi
fi
    
if [ $opt_build -eq 1 ] ; then
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make depend
  make -j1
  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  P2=$W/work2
  if [ -d $P2 ] ; then rm -rf $P2 ; fi ; mkdir -p $P2
  make install_sw INSTALL_PREFIX=$P2

  # libs
  install -v -d -m755 $P/usr/${libdir}/openssl-1.0
  for l in crypto ssl
  do
    install -v -m755 $P2/usr/${libdir}/openssl-1.0/lib"$l".so.1.0.0 $P/usr/${libdir}
  done
  cp -Rv $P2/usr/${libdir}/openssl-1.0/* $P/usr/${libdir}/openssl-1.0/
  ln -sfv ../libssl.so.1.0.0 $P/usr/${libdir}/openssl-1.0/
  ln -sfv ../libcrypto.so.1.0.0 $P/usr/${libdir}/openssl-1.0/
  sed 's@/include$@/include/openssl-1.0@' -i $P/usr/lib/openssl-1.0/pkgconfig/*.pc

  # includes
  install -v -d -m755 $P/usr/include/openssl-1.0
  cp -Rv $P2/usr/include/openssl $P/usr/include/openssl-1.0

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
