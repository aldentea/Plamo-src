#!/bin/sh -x
##############################################################
url='http://ftp.ne.jp/GNU/glibc/glibc-2.20.tar.xz'
pkgbase=glibc
vers=2.20
arch=x86_64
# arch=i686
build=P1
src=glibc-2.20
if [ "$arch" = "x86_64" ]; then
    OPT_CONFIG='--enable-obsolete-rpc --disable-profile --enable-add-ons --enable-kernel=2.6.32 --libexecdir=/usr/lib64/glibc --localedir=/usr/share/locale --enable-tls'
else
    OPT_CONFIG='--enable-obsolete-rpc --disable-profile --enable-add-ons --enable-kernel=2.6.32 --libexecdir=/usr/lib/glibc --localedir=/usr/share/locale --enable-tls'
fi
DOCS='COPYING COPYING.LIB ChangeLog ChangeLog.1 ChangeLog.10 ChangeLog.11 ChangeLog.12 ChangeLog.13 ChangeLog.14 ChangeLog.15 ChangeLog.16 ChangeLog.17 ChangeLog.2 ChangeLog.3 ChangeLog.4 ChangeLog.5 ChangeLog.6 ChangeLog.7 ChangeLog.8 ChangeLog.9 INSTALL LICENSES NEWS README'

# these patches are derived from Arch Linux

# 'https://projects.archlinux.org/svntogit/packages.git/plain/trunk/glibc-2.20-do_ftell_wide-memleak.patch?h=packages/glibc'
# https://projects.archlinux.org/svntogit/packages.git/plain/trunk/glibc-2.20-getifaddrs_internal-segfault.patch?h=packages/glibc
# https://projects.archlinux.org/svntogit/packages.git/plain/trunk/glibc-2.20-linux-3.16-additions.patch?h=packages/glibc' 
# https://projects.archlinux.org/svntogit/packages.git/plain/trunk/glibc-2.19-fix-sign-in-bsloww1-input.patch?h=packages/glibc
# https://projects.archlinux.org/svntogit/packages.git/plain/trunk/glibc-2.19-tzselect-default.patch?h=packages/glibc
# https://projects.archlinux.org/svntogit/packages.git/plain/trunk/glibc-2.19-xattr_header.patch?h=packages/glibc
#
# LFS's patch
# http://www.linuxfromscratch.org/patches/lfs/development/glibc-2.19-fhs-1.patch

patchfiles='glibc-2.19-fhs-1.patch glibc-2.20-do_ftell_wide-memleak.patch glibc-2.20-getifaddrs_internal-segfault.patch glibc-2.20-linux-3.16-additions.patch'

compress=txz
##############################################################

install2() {
    install -d ${2%/*} ; install -m 644 $1 $2
}

strip_bindir() {
    echo "compressing in $1"
    if [ -d $1 ] ; then (
	    shopt -s nullglob
	    cd $1
	    for i in * ; do
		echo "$i"
		if [ -h $i ] ; then continue ; fi
		if [ -n "`file $i | grep "not stripped"`" ] ; then #`
		    echo "stripping -p $i"
		    strip -p $i
		fi
	    done
	    ) fi
}

strip_libdir() {
    echo "compressing in $1"
    if [ -d $1 ] ; then (
	    shopt -s nullglob
	    cd $1
	    for i in *.so *.so.* *.a ; do
		echo "$i"
		if [ -h $i ] ; then continue ; fi
		if [ -n "`nm -a $i | grep " a "`" ] ; then #`
		    if [ $i != ${i%.a} ] ; then
			echo -n "ranlib and "
			touch -r $i $i.mt ; ranlib $i ; touch -r $i.mt $i ; rm $i.mt
		    fi
		    echo "stripping -gp $i"
		    strip -gp $i
		fi
	    done
	    ) fi
}

gzip_dir() {
    echo "compressing in $1"
    if [ -d $1 ] ; then (
	    cd $1
	    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    # files=`ls -a --indicator-style=none | tail -n+3`
	    for i in $files ; do
		echo "$i"
		if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
		lnks=`ls -l $i | awk '{print $2}'`
		if [ $lnks -gt 1 ] ; then
		    inum=`ls -i $i | awk '{print $1}'`
		    for j in `find . -maxdepth 1 -inum $inum` ; do
			if [ ${j#./} == $i ] ; then
				    gzip -f $i
			else
			    rm -f ${j#./} ; ln $i.gz ${j#./}.gz
			fi
		    done
		elif [ -h $i ] ; then
		    target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
		else
		    gzip $i
		fi
	    done
	    for i in $files ; do mv ${i%.gz}.gz $C ; done
	    for i in $files ; do mv $C/${i%.gz}.gz . ; done
	    ) fi
}


gzip_one() {
    gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress() {
  for i in {$P,$P/usr,$P/usr/X11R7}/{sbin,bin} ; do strip_bindir $i ; done
  for i in {$P,$P/usr,$P/usr/X11R7}/lib ; do strip_libdir $i ; done
  for i in {$P,$P/usr,$P/usr/X11R7}/lib64 ; do strip_libdir $i ; done
  if [ -f $infodir/dir ] ; then rm -f $infodir/dir ; fi
  gzip_dir $infodir
  for i in `seq 9` n ; do gzip_dir $mandir/man$i ; done
  for i in `seq 9` n ; do gzip_dir $xmandir/man$i ; done
}



prune_symlink() {
  echo "pruning symlink in $1"
  if [ -d $1 ] ; then (
    cd $P
    rm -f /tmp/iNsT-a.$$ ; touch /tmp/iNsT-a.$$
    for i in `find ${1#$P/} -type l` ; do
      target=`readlink $i`
      echo "$i -> $target"
      echo $i$'
'$target >> /tmp/iNsT-a.$$
    done
    COUNT=1
    LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    while [ -n "$LINE" ] ; do
      LINKGOESIN=`dirname $LINE`
      LINKNAMEIS=`basename $LINE`
      COUNT=$(($COUNT + 1))
      LINKPOINTSTO=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
      if [ ! -d install ] ; then mkdir install ; fi
      cat <<- EOF >> install/doinst.sh
	( cd $LINKGOESIN ; rm -rf $LINKNAMEIS )
	( cd $LINKGOESIN ; ln -sf $LINKPOINTSTO $LINKNAMEIS )
	EOF
      rm -rf $LINE ; touch -t `date '+%m%d0900'` install/doinst.sh $LINE
      COUNT=$(($COUNT + 1))
      LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    done
    rm -f /tmp/iNsT-a.$$
  ) fi
}

convert() {
    for i in {$P,$P/usr}/{sbin,bin} ; do prune_symlink $i ; done
    for i in {$P,$P/usr}/lib ; do prune_symlink $i ; done
    for i in {$P,$P/usr}/lib64 ; do prune_symlink $i ; done
    prune_symlink $infodir
    for i in `seq 9` n ; do prune_symlink $mandir/man$i ; done
}

W=`pwd`
WD=/home/kojima/Build
for i in `seq 0 $((${#src[@]} - 1))` ; do
    S[$i]=$W/${src[$i]} 
    if [ $arch = "x86_64" ]; then
	B[$i]=$WD/build`test ${#src[@]} -eq 1 || echo $i`
    else
	B[$i]=$WD/build32`test ${#src[@]} -eq 1 || echo $i`
    fi      
done

P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
xmandir=$P/usr/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build

if [ $arch = "x86_64" ]; then
    target="-m64"
    libdir="lib64"
    suffix="64"
else
    target="-m32"
    libdir="lib"
    suffix=""
fi

if [ $# -eq 0 ] ; then
    opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
    opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
    for i in $@ ; do
	case $i in
	    download) opt_download=1 ;;
            config) opt_config=1 ;;
            build) opt_build=1 ;;
            package) opt_package=1 ;;
        esac
    done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then wget $i ; fi
  done
  for i in $url ; do
    case ${i##*.} in
    tar) tar xvpf ${i##*/} ;;
    gz) tar xvpzf ${i##*/} ;;
    *) tar xvf ${i##*/} ;;
    esac
  done
fi

if [ $opt_config -eq 1 ] ; then
  # for i in `seq 0 $((${#B[@]} - 1))` ; do
  #   if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  # done
######################################################################
# * ./configure を行う前に適用したい設定やパッチなどがある場合はここに
#   記述します。
######################################################################
    # if [ -d ${S} ]; then
    #	rm -rf ${S}
    #	tar xvf glibc-2.16.0.tar.xz
    # fi
    cd ${S}
    for patch in $patchfiles ; do
       if [ ! -f .$patch ]; then
           patch -p1 < $W/$patch
           touch .$patch
       fi
    done
    sed -i -e 's/"db1"/& \&\& $name ne "nss_test1"/' scripts/test-installation.pl
    if [ -d $WD/${src}_build ]; then
	rm -rf $WD/${src}_build 
    fi
    mkdir $WD/${src}_build
    cd $WD/${src}_build

    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi

  if [ -x $W/$src/configure ] ; then
      export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
      export LDFLAGS='-Wl,--as-needed' 

      if [ "$arch" = "i586" ]; then
	  echo "CFLAGS += -march=i486 -mtune=native -O3 -pipe" >> configparms
      else
	  echo "slibdir=/lib64" >> configparms
	  echo "CFLAGS += -mtune=generic -O3 -pipe" >> configparms
      fi

      $W/$src/configure --prefix=/usr --build="$arch"-pc-linux --target="$arch"-pc-linux ${OPT_CONFIG}
  fi
  if [ $? != 0 ]; then
      echo "configure error. $0 script stop"
      exit 255
  fi
fi

if [ $opt_build -eq 1 ] ; then
    cd $WD/${src}_build
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make -j3
    fi
fi

if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  cd $WD/${src}_build
  if [ -f Makefile ] ; then
      export LDFLAGS='-Wl,--as-needed'
      make install install_root=$P
  fi

#############################################################
  P2="$W/work2"
  if [ -d $P2 ]; then
      rm -rf $P2
  fi
  mkdir -p $P2
  echo "moving files into work2 dir"
  mv -v $P/* $P2

##### for glibc2
  rm -rf $P
  mkdir -p $P/usr/${libdir}

  mv -v $P2/etc $P
  rm $P/etc/{localtime,ld.so.cache}

  mv -v $P2/${libdir} $P
  strip -g $P/${libdir}/*.so

  mv -v $P2/sbin  $P
  strip $P/sbin/*

  mv -v $P2/usr/bin $P/usr/
  strip $P/usr/bin/*

  mv -v $P2/usr/${libdir}/gconv $P/usr/${libdir}
  strip $P/usr/${libdir}/gconv/*
  mv -v $P2/usr/${libdir}/audit $P/usr/${libdir}
  strip $P/usr/${libdir}/audit/*

  mv -v $P2/usr/libexec $P/usr
  mv -v $P2/usr/sbin $P/usr

  mkdir -p $P/usr/share
  for i in i18n locale zoneinfo ; do
      mv -v $P2/usr/share/$i $P/usr/share
  done

  # $localedir は localedata の置き場で，生成した mo ファイルは
  # x86/x86_64 とも $msgcatdir に置くのが最近の流儀っぽい
  mkdir -p $P/usr/lib
  ( cd $P/usr/lib ; ln -sf ../share/locale )
  # 過去との互換性のためにこっちもリンクを張っておく
  if [ "$arch" = "x86_64" ]; then
      mkdir -p $P/usr/${libdir}
      ( cd $P/usr/${libdir} ; ln -sf ../share/locale )
  fi
  ( cd $P/usr/share/locale ; mv ja ja_JP.eucJP )
  ( cd $P/usr/share/locale ; ln -sf ja_JP.eucJP ja )
  ( cd $P/usr/share/locale ; ln -sf ja_JP.eucJP ja_JP )

  gunzip $P/usr/share/i18n/charmaps/EUC-JP.gz
  $P/usr/bin/localedef --charmap=$P/usr/share/i18n/charmaps/EUC-JP --inputfile=$P/usr/share/i18n/locales/ja_JP $P/usr/share/locale/ja_JP.eucJP
  gzip -f $P/usr/share/i18n/charmaps/EUC-JP

  ( cd $P/usr/share/locale ; mkdir ja_JP.UTF-8 )
  gunzip $P/usr/share/i18n/charmaps/UTF-8.gz
  $P/usr/bin/localedef --charmap=$P/usr/share/i18n/charmaps/UTF-8 --inputfile=$P/usr/share/i18n/locales/ja_JP $P/usr/share/locale/ja_JP.UTF-8
  gzip -f $P/usr/share/i18n/charmaps/UTF-8

  for i in $P/usr/share/locale/* ; do
      chk=`echo $i | grep ja`
      if [ "$chk.x" = ".x" ]; then
	  rm -rf $i
      fi
  done

  cat <<EOF > $P/etc/ld.so.conf.new
/usr/local/${libdir}
/opt/kde/${libdir}
/usr/${libdir}/sasl2
/usr/${libdir}/pstoedit
/usr/heimdal/${libdir}
/usr/${libdir}/xulrunner
/opt/mysql/${libdir}
/opt/pgsql/${libdir}
EOF

  cat << "EOF" > $P/etc/nsswitch.conf.new
# /etc/nsswitch.conf
#
# Name Service Switch configuration file.
#

passwd:     files db nis
shadow:     files
group:      files db nis

hosts:      files nisplus nis dns
networks:   files nisplus

ethers:     files db nisplus
protocols:  files db nisplus
rpc:        files db nisplus
services:   files db nisplus
autofs:     files
EOF

  mkdir -p $docdir/$src
  for i in BUGS CONFORMANCE COPYING COPYING.LIB ChangeLog* FAQ INSTALL LICENSES NEWS NOTES PROJECTS README README.libm ; do
      cp ../$src/$i $docdir/$src
  done

  cp ../PlamoBuild.glibc-$vers $docdir/$src

  mkdir -p $P/install
cat <<"EOF" > $P/install/initpkg
echo "glibc パッケージの初期化中"
# 既存の ld.so.conf が無ければ新しく ld.so.conf.new を ld.so.conf とするが
# あればそのままにしておく
if [ ! -f /etc/ld.so.conf ]; then
  mv /etc/ld.so.conf.new /etc/ld.so.conf
else
  rm /etc/ld.so.conf.new
fi
ldconfig

# 既存の nsswitch.conf が無ければ新しく nsswitch.conf.new を nsswitch.conf とするが
# あればそのままにしておく
if [ ! -f /etc/nsswitch.conf ]; then
  mv /etc/nsswitch.conf.new /etc/nsswitch.conf
else
  rm /etc/nsswitch.conf.new
fi
echo "glibc タイムゾーン設定中"
# 既存のlocaltimeがあればそのまま，無ければJSTで作る
if [ ! -e /etc/localtime ]; then
   TIMEZONE="Japan"
   ( cd /usr/share/zoneinfo ; ln -sf posix/$TIMEZONE localtime )
   ( cd /etc ; cp ../usr/share/zoneinfo/localtime localtime )
fi

echo "glibc パッケージの初期化完了"

EOF

  touch $W/i.et
  cd $W
  find $P ! -type l -newer i.st ! -newer i.et       -exec touch -t `date '+%m%d0900'` {} \;
  compress
######################################################################
# * compress 対象以外で圧縮したいディレクトリやファイルがある場合はここ
#   に記述します(strip_{bin,lib}dir や gzip_{dir,one} を使います)。
# * 他のアーカイブから追加したいファイルがある場合はここに記述します。
######################################################################
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      touch -t `date '+%m%d0900'` $docdir/$src/$myname
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done

  for patch in $patchfiles ; do
      cp $W/$patch $docdir/$src/$patch
      gzip_one $docdir/$src/$patch
  done
######################################################################
# * ドキュメントツリーの調整が必要な場合はここに記述します。
######################################################################
  convert
######################################################################
# * convert 対象以外で刈り取りたいシンボリックリンクがある場合はここに
#   記述します(prune_symlink を使います)。
# * 完成した作業ディレクトリから tar イメージを作成する手順を以降に記述
#   します(こだわりを求めないなら単に makepkg でも良いです)。
######################################################################
# tar cvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
# tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
# tar rvpf $pkg.tar -C $P usr/share/doc/$src
# touch -t `date '+%m%d0900'` $pkg.tar ; gzip $pkg.tar ; touch $pkg.tar.gz
# mv $pkg.tar.gz $pkg.tgz
  cd $P
  chk_me=`whoami | grep root`
  if [ "$chk_me.x" != ".x" ];then
      chown -R root.root *
  fi
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

##### for libc
  echo "building libc package"
  pkg="libc"-$vers-$arch-$build

  rm -rf $P
  mkdir -p $P/usr
  mv -v $P2/usr/include $P/usr
  mv -v $P2/usr/${libdir} $P/usr
  mv -v $P2/usr/share $P/usr

  touch $W/i.et
  cd $W
  find $P ! -type l -newer i.st ! -newer i.et       -exec touch -t `date '+%m%d0900'` {} \;
  compress
  cd $P
  if [ "$chk_me.x" != ".x" ];then
      chown -R root.root *
  fi
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
