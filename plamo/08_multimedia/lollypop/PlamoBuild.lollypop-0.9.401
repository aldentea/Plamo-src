#!/bin/sh
##############################################################
pkgbase='lollypop'
vers='0.9.401'
portal_vers="0.9.6"
url="https://gitlab.gnome.org/gnumdk/lollypop/uploads/6cbec90c1a3c8a6a657f75fea3f64bbb/lollypop-${vers}.tar.xz"
portal_url="https://gitlab.gnome.org/gnumdk/lollypop-portal/uploads/7bcb3e4bc40ff460904ae7edaf10d54b/lollypop-portal-${portal_vers}.tar.xz"
verify=""
arch=`uname -m`
build=B1
src="${pkgbase}-${vers}"
OPT_CONFIG=(--buildtype='release')
DOCS='AUTHORS LICENSE README.md TODO meson_post_install.py'
patchfiles=''
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  download_sources
  if [ ! -f ${portal_url##*/} ]; then
    wget $portal_url
  fi
  tar xvf ${portal_url##*/}
fi

if [ $opt_config -eq 1 ] ; then
  if [ -d $B ] ; then rm -rf $B ; fi
  for s in $(basename ${url##*/} .tar.xz) $(basename ${portal_url##*/} .tar.xz)
  do
    echo
    echo "=== configure $s ==="
    echo
    mkdir -p $B/$s  
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################
    cd $W/$s
    for patch in $patchfiles ; do
      if [ ! -f .${patch} ]; then
        patch -p1 < $W/$patch
        touch .${patch}
      fi
    done

    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
    export LDFLAGS='-Wl,--as-needed' 
    meson --prefix=/usr --libdir=${libdir} ${OPT_CONFIG[@]} $B/$s
    
    if [ $? != 0 ]; then
      echo "configure error. $0 script stop"
      exit 255
    fi
  done
fi
    
if [ $opt_build -eq 1 ] ; then
  for s in $(basename ${url##*/} .tar.xz) $(basename ${portal_url##*/} .tar.xz)
  do
    echo
    echo "=== Build $s ==="
    echo
    cd $W/$s
    export LDFLAGS='-Wl,--as-needed'
    ninja -C $B/$s
    if [ $? != 0 ]; then
      echo "build error. $0 script stop"
      exit 255
    fi
  done
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  for s in $(basename ${url##*/} .tar.xz) $(basename ${portal_url##*/} .tar.xz)
  do
    echo
    echo "=== Install $s ==="
    echo
    cd $W/$s
    export LDFLAGS='-Wl,--as-needed'
    DESTDIR=$P ninja -C $B/$s install
  done

  mkdir -p $P/install
  cat <<EOF >> $P/install/initpkg
if [ -x /usr/bin/glib-compile-schemas ]; then
  /usr/bin/glib-compile-schemas /usr/share/glib-2.0/schemas/
fi
EOF
################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
