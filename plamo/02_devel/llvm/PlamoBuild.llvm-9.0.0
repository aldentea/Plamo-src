#!/bin/sh
##############################################################
pkgbase="llvm"
vers="9.0.0"
urls=(https://releases.llvm.org/${vers}/llvm-${vers}.src.tar.xz
      https://releases.llvm.org/${vers}/cfe-${vers}.src.tar.xz
      https://releases.llvm.org/${vers}/compiler-rt-${vers}.src.tar.xz
      https://releases.llvm.org/${vers}/clang-tools-extra-${vers}.src.tar.xz
      https://releases.llvm.org/${vers}/lld-${vers}.src.tar.xz)
url=""
verify=""
digest=""
arch=`uname -m`
build=B1
src="llvm-${vers}.src"
# -DLLVM_LINK_LLVM_DYLIB=ON
# -DLLVM_BUILD_LLVM_DYLIB=ON
# -DCLANG_RESOURCE_DIR=../${libdir}/clang/${vers}
OPT_CONFIG="-G Ninja
	-DLLVM_ENABLE_FFI=ON
	-DCMAKE_BUILD_TYPE=Release
	-DLLVM_ENABLE_RTTI=ON
	-DLLVM_TARGETS_TO_BUILD='host;AMDGPU;BPF'
	-DBUILD_SHARED_LIBS=ON
	-DLLVM_USE_LINKER=gold
	-DLLVM_ENABLE_ASSERTIONS=OFF
	-DLLVM_INSTALL_UTILS=ON
	-DLLVM_BINUTILS_INCDIR=/usr/include
	-DLLVM_BUILD_TESTS=ON"
DOCS="CODE_OWNERS.TXT CREDITS.TXT LICENSE.TXT LLVMBuild.txt README.txt RELEASE_TESTERS.TXT"
patchfiles=""
# specifies files that are not in source archive and patchfiles
addfiles=""
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    for url in ${urls[@]}
    do
        verify=${url}.sig
        download_sources
    done
fi

if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done

    ( cd $S/tools &&
          cp -a $W/cfe-${vers}.src clang &&
          cp -a $W/lld-${vers}.src lld )

    ( cd $S/tools/clang/tools &&
          cp -a $W/clang-tools-extra-${vers}.src extra )

    ( cd $S/projects &&
          cp -a $W/compiler-rt-${vers}.src compiler-rt )

######################################################################
#  out of tree build. patch apply in src dir
######################################################################
    if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B
    cd $S
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p1 < $W/$patch
            touch .${patch}
        fi
    done

    cd $B
    export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig
    export LDFLAGS='-Wl,--as-needed'
    cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ${OPT_CONFIG} $S
    if [ $? != 0 ]; then
        echo "configure error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_build -eq 1 ] ; then
    cd $B 
    export LDFLAGS='-Wl,--as-needed'
    CC=gcc CXX=g++ \
    ninja -v
    if [ $? != 0 ]; then
        echo "build error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  DESTDIR=$P ninja install

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
