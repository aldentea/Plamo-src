#!/bin/sh
##############################################################
pkgbase='autofs'
vers='5.1.4'
url="http://www.kernel.org/pub/linux/daemons/${pkgbase}/v5/${pkgbase}-${vers}.tar.xz"
verify="https://www.kernel.org/pub/linux/daemons/autofs/v5/autofs-${vers}.tar.sign"
arch=`uname -m`
build=B3
src="${pkgbase}-${vers}"
OPT_CONFIG="--without-openldap"
DOCS='CHANGELOG COPYING INSTALL README README.active-restart README.amd-maps README.changer README.ncpfs README.replicated-server README.smbfs README.v5.release'
patchfiles=''
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  download_sources
fi

if [ $opt_config -eq 1 ] ; then
  if [ -d $B ] ; then rm -rf $B ; fi ; cp -a $S $B
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################
  cd $B
  for patch in $patchfiles ; do
      patch -p1 < $W/$patch
  done
  # if [ -f autogen.sh ] ; then
  #   sh ./autogen.sh
  # fi

  export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
  export LDFLAGS='-Wl,--as-needed'
  export CPP='/usr/bin/cpp'
  ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]}
    
  if [ $? != 0 ]; then
    echo "configure error. $0 script stop"
    exit 255
  fi
fi
    
if [ $opt_build -eq 1 ] ; then
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make -j3
  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make install DESTDIR=$P

  # This is config for init script in autofs source archive
  # But we use init srcipt in BLFS initscripts, so unneeded
  rm -vf $P/etc/sysconfig/autofs

  # install init script
  install -v -Dm644 $W/autofs.init $P/etc/rc.d/init.d/autofs
  install -v -Dm644 $W/autofs.init $docdir/$src/autofs.init

  install -v -Dm644 $W/autofs.conf $P/etc/sysconfig/autofs.conf
  install -v -Dm644 $W/autofs.conf $docdir/$src/autofs.conf

  install -dm755 -v $P/etc/rc.d/rcS.d
  ln -sfv ../init.d/autofs $P/etc/rc.d/rcS.d/S52autofs

  # remove original init script
  rm -v -rf $P/etc/init.d
  
  rm -v $P/etc/autofs_ldap_auth.conf

  configfiles="autofs.conf auto.master auto.misc
	auto.net auto.smb sysconfig/autofs.conf"
  for f in $configfiles
  do
    mv -v $P/etc/$f $P/etc/$f.dist
  done

  mkdir -p $P/install
  cat <<EOF >> $P/install/initpkg
configfiles="$configfiles"
for f in \$configfiles
do
  if [ ! -f /etc/\$f ]; then
    cp /etc/\$f.dist /etc/\$f
  fi
done
EOF

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
