#!/bin/sh
##############################################################
pkgbase=postfix
vers=2.11.9
url="ftp://ftp.riken.jp/net/postfix/postfix-release/official/postfix-${vers}.tar.gz"
verify=$url.sig
arch=`uname -m`
build=P1
src=${pkgbase}-${vers}
OPT_CONFIG=''
DOCS='HISTORY IPv6-ChangeLog LICENSE RELEASE_NOTES-1.0 RELEASE_NOTES-1.1 RELEASE_NOTES-2.0 RELEASE_NOTES-2.1 RELEASE_NOTES-2.2 RELEASE_NOTES-2.3 RELEASE_NOTES-2.4 RELEASE_NOTES-2.5 RELEASE_NOTES-2.6 RELEASE_NOTES-2.7 RELEASE_NOTES-2.8 RELEASE_NOTES-2.9 RELEASE_NOTES-2.10 TLS_TODO pflogsumm_quickfix.txt postfix-install'
patchfiles=''
compress=txz
##############################################################

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_all() {
  for chk in `find . ` ; do
    chk_elf=`file $chk | grep ELF`
    if [ "$chk_elf.x" != ".x" ]; then
      chk_lib=`echo $chk | grep lib`
      if [ "$chk_lib.x" != ".x" ]; then
         echo "stripping $chk with -g "
         strip -g $chk
      else
         echo "stripping $chk"
         strip $chk
      fi
    fi
  done
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    # files=`ls -a --indicator-style=none | tail -n+3`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress_all() {
  cd $P
  strip_all
}  

verify_checksum() {
  echo "Verify Checksum..."
  checksum_command=$1
  verify_file=${verify##*/}
  for s in $url ; do
    srcsum=`$checksum_command ${s##*/}`
    verifysum=`grep ${s##*/} $verify_file`
    if [ x"$srcsum" != x"$verifysum" ]; then
      exit 1
    fi
  done
  exit 0
}

W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} 
  if [ $arch = "x86_64" ]; then
      B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
  else
      B[$i]=$W/build32`test ${#src[@]} -eq 1 || echo $i`
  fi      
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
xmandir=$P/usr/X11R7/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build

if [ $arch = "x86_64" ]; then
  target="-m64"
  libdir="lib64"
  suffix="64"
else
  target="-m32"
  libdir="lib"
  suffix=""
fi

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then
      wget $i
    fi
  done
  for i in $verify ; do
    if [ ! -f ${i##*/} ] ; then
      wget $i
    fi
  done
  for i in $verify ; do
    case ${i##*.} in
    asc) gpg2 --verify ${i##*/} ;;
    sig) gpg2 --allow-weak-digest-algos --verify ${i##*/} ;;
    sha256sum) verify_checksum "sha256sum" ;;
    esac
    if [ $? -ne 0 ]; then
      echo "archive verify was failed."
      exit 1
    else
      echo "archive verify was successed."
    fi
  done
  for i in $url ; do
    case ${i##*.} in
    gz) tar xvpzf ${i##*/} ;;
    bz2) tar xvpjf ${i##*/} ;;
    *) tar xvpf ${i##*/} ;;
    esac
  done
fi

if [ $opt_config -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  done
######################################################################
# * ./configure を行う前に適用したい設定やパッチなどがある場合はここに
#   記述します。
######################################################################
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for patch in $patchfiles ; do
       patch -p1 < $W/$patch
    done

    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi

    # for installing test tools
    cat <<"EOF" >> `pwd`/conf/postfix-files
$command_directory/smtp-source:f:root:root:-:755
$command_directory/smtp-sink:f:root:root:-:755
$command_directory/qmqp-source:f:root:root:-:755
$command_directory/qmqp-sink:f:root:root:-:755
$manpage_directory/man1/qmqp-sink.1:f:root:root:-:644
$manpage_directory/man1/smtp-sink.1:f:root:root:-:644
$manpage_directory/man1/qmqp-source.1:f:root:root:-:644
$manpage_directory/man1/smtp-source.1:f:root:root:-:644
$html_directory/smtp-sink.1.html:f:root:-:644
$html_directory/qmqp-sink.1.html:f:root:-:644
$html_directory/smtp-source.1.html:f:root:-:644
$html_directory/qmqp-source.1.html:f:root:-:644
EOF

    if [ $arch = "x86_64" ]; then
        make makefiles CCARGS="-m64 -DUSE_SASL_AUTH -DNO_NIS -DUSE_CYRUS_SASL -I/usr/include/sasl -DUSE_TLS" AUXLIBS="-L/usr/lib64 -lsasl2 -lssl -lcrypto"
    else
        make makefiles CCARGS="-m32 -DUSE_SASL_AUTH -DNO_NIS -DUSE_CYRUS_SASL -I/usr/include/sasl -DUSE_TLS" AUXLIBS="-L/usr/lib -lsasl2 -lssl -lcrypto"
    fi
  done

fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      export LDFLAGS='-Wl,--as-needed'
      make -j3
    fi
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}

    mkdir -p $P/usr/libexec/postfix
    mkdir -p $P/usr/sbin
    mkdir -p $P/usr/share/man/man1
    mkdir -p $P/usr/share/man/man5
    mkdir -p $P/usr/share/man/man8
    mkdir -p $P/usr/share/doc/$src
    mkdir -p $P/var/spool/postfix

    echo "Install to $P"
    sh postfix-install -package -non-interactive install_root=$P manpage_directory=/usr/share/man/ html_directory=/usr/share/doc/$src/html readme_directory=/usr/share/doc/$src

  done
######################################################################
# * make install でコピーされないファイルがある場合はここに記述します。
######################################################################

  echo "make init.d script..."
  mkdir -p $P/etc/rc.d/init.d
  ( cd $P/etc/rc.d/init.d ; ln -sf ../../../usr/sbin/postfix postfix )

  echo "make link sendmail..."
  mkdir -p $P/usr/lib
  ( cd $P/usr/lib ; ln -sf ../../../usr/sbin/sendmail sendmail )

  # move config files to /etc/postfix/new
  echo -n "move config files to /etc/postfix.dist"
  mv -v $P/etc/postfix $P/etc/postfix.dist
  echo " done."

  # make /etc/alias
  echo -n "make /etc/aliases file"
  cat > $P/etc/aliases.dist <<EOF
#
#       @(#)aliases     8.2 (Berkeley) 3/5/94
#
#  Aliases in this file will NOT be expanded in the header from
#  Mail, but WILL be visible over networks or from /bin/mail.
#
#       >>>>>>>>>>      The program "newaliases" must be run after
#       >> NOTE >>      this file is updated for any changes to
#       >>>>>>>>>>      show through to sendmail.
#

# Basic system aliases -- these MUST be present.
MAILER-DAEMON:  postmaster
postmaster:     root

# General redirections for pseudo accounts.
bin:            root
daemon:         root
games:          root
ingres:         root
nobody:         root
system:         root
toor:           root
uucp:           root

# Well-known aliases.
manager:        root
dumper:         root
webmaster:      root
abuse:          root

# trap decode to catch security attacks
decode:         root

EOF
  echo " done."

  # additional plamo original configuration to main.cf
  echo -n "add plamo original configuration to main.cf"
  (cd $P/etc/postfix.dist
      cat >> main.cf <<"EOF"

# Plamo local configurations(for fml and SMTP auth with SASL2)
alias_maps = hash:/etc/aliases
allow_mail_to_commands = alias,forward,include
smtpd_recipient_limit = 5000

# smtpd_sasl_auth_enable = yes
# smtpd_sasl_local_domain =
# smtpd_sasl_authenticated_header = yes
# smtpd_recipient_restrictions = permit_mynetworks permit_sasl_authenticated reject_unauth_destination
## for Cyrus SASL
# smtpd_sasl_path = smtpd
# smtp_sasl_password_maps = hash:/etc/postfix/sasl_password
## for dovecot SASL
# smtpd_sasl_type = dovecot
# data_directory = /var/lib/postfix

EOF
)
  echo " done."

  # enable submission port
  ( cd $P/etc/postfix.dist
    sed -i -e 's/^#submission/submission/' master.cf
  )

  # 
  ( cd $P/var/spool/postfix
    rm -rf *
  )

  mkdir -p $P/install
  cat > $P/install/initpkg <<EOF
if [ -f /etc/postfix/main.cf ]; then
  sed -e "s@^readme_directory.*@readme_directory=/usr/share/doc/$src@" -e "s@^html_directory.*@html_directory=/usr/share/doc/$src/html@" -i /etc/postfix/main.cf
fi
EOF
  cat >> $P/install/initpkg <<"EOF"
( cd /etc
  if [ ! -f aliases ] ; then
    cp aliases.dist aliases
  fi
)

( cd /etc
  if  ! grep submission services 1>/dev/null 2>/dev/null; then
     cat >> services <<EOF2
submission      587/tcp
submission      587/udp
EOF2
  fi
  inetd_chk=`ps axww | grep inetd`
  if [ "$inetd_chk.x" != ".x" ]; then
      /bin/killall -HUP inetd
  fi
)

if [ ! -d /etc/postfix ]; then
  cp -a /etc/postfix.dist /etc/postfix
fi

( cd /etc/postfix
  for conf_file in `ls /etc/postfix.dist/`
  do
    if [ ! -f $conf_file ]; then
      cp /etc/postfix.dist/$conf_file .
    fi
  done
)

/usr/sbin/postfix upgrade-configuration
/usr/sbin/postfix set-permissions

if [ ! -f /etc/aliases.db ]; then
  /usr/bin/newaliases
fi
EOF

######################################################################
# path に lib があるバイナリは strip -g, ないバイナリは strip する
######################################################################
  cd $P
  compress_all
  #if [ -d $P/usr/share/man ]; then
  #  for mdir in `find $P/usr/share/man -name man[0-9mno] -type d`; do
  #    gzip_dir $mdir
  #  done
  #fi
######################################################################
# * compress 対象以外で圧縮したいディレクトリやファイルがある場合はここ
#   に記述します(strip_{bin,lib}dir や gzip_{dir,one} を使います)。
# * 他のアーカイブから追加したいファイルがある場合はここに記述します。
######################################################################
  cd $W
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done

  for patch in $patchfiles ; do
    cp $W/$patch $docdir/$src/$patch
    gzip_one $docdir/$src/$patch
  done

############################################################
#   /usr/share/doc 以下には一般ユーザのIDのままのファイルが
#   紛れこみがちなので
############################################################

  chk_me=`whoami | grep root`
  if [ "$chk_me.x" != ".x" ]; then
      chown -R root.root $P/usr/share/doc
  fi

######################################################################
# * convert 対象以外で刈り取りたいシンボリックリンクがある場合はここに
#   記述します(prune_symlink を使います)。
# * 完成した作業ディレクトリから tar イメージを作成する手順を以降に記述
#   します(こだわりを求めないなら単に makepkg でも良いです)。
######################################################################
# tar cvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
# tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
# tar rvpf $pkg.tar -C $P usr/share/doc/$src
# touch -t `date '+%m%d0900'` $pkg.tar ; gzip $pkg.tar ; touch $pkg.tar.gz
# mv $pkg.tar.gz $pkg.tgz
  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
