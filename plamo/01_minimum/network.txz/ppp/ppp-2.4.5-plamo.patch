diff -uprN ppp-2.4.5/00README-Plamo.euc build/00README-Plamo.euc
--- ppp-2.4.5/00README-Plamo.euc	1970-01-01 09:00:00.000000000 +0900
+++ build/00README-Plamo.euc	2012-12-15 08:58:41.000000000 +0900
@@ -0,0 +1,92 @@
+1. 設定
+
+/etc/modules.conf には、
+
+  alias ppp0 ppp_generic
+  alias ppp1 ppp_generic
+
+の2行を追加しておいた方が、syslog に余計なエラーが出ずに済みます。
+# 2.4系 + modutils-2.4.25 の場合
+
+PPPoE を使う場合、カーネルの PPPoEドライバ (CONFIG_PPPOE) を追加してく
+ださい。組み込みにした場合はカーネル本体の再構築、モジュールにした場合
+はモジュールの作成・インストールを行なうことになります。
+
+同期PPPを使う場合、CONFIG_PPP_SYNC_TTY および CONFIG_N_HDLC も要求され
+るはずですが、現在カーネルモード PPPoE では未サポートですので、このあ
+たりは放っておいても構いません。
+
+ドライバをモジュール化した場合、/etc/modules.conf には、下記の設定を追
+加しておいてください。
+
+  alias net-pf-24 pppoe
+  alias tty-ldisc-13 n_hdlc       # ←今のところは不要
+
+
+2. 使い方
+
+pppsetup では、ダイアルアップPPP と PPPoE の設定のどちらでも行なえます。
+また、複数の設定を握ることができます。
+
+接続と切断には pon, poff を用い、
+
+  % pon       → default の設定を使用
+  % pon hoge  → 設定 hoge を使用
+  % pon -i    → 設定を選択 (tty上)
+  % pon -ix   → 設定を選択 (XのGUI / 要 GTK2, Python, PyGTK)
+  % poff      → 切断
+  % poff hoge → pon hoge で繋いだ接続を切断
+  % poff -a   → 全部切断
+
+みたいな感じで使えます (pon -i, pon -ix はオリジナルです)。
+
+/usr/sbin/pppd を setuid-root すれば、一般ユーザで接続/切断が可能です。
+例えば、
+
+  # chgrp tty /usr/sbin/pppd
+  # chmod 4554 /usr/sbin/pppd
+
+とすると、ttyグループに属しているユーザのみ接続/切断が可能になります。
+(PPxP のデフォルトと同様)
+
+その他の特徴は以下の通りです。
+
+・/etc/ppp/ip-up,ip-down で、/etc/resolv.conf の調整と planetplugin の
+  呼び出し(もしあれば)を行なうように設定済
+  (dnscache とかを使っている方はここを直接編集してください)
+・使う設定を選択するダイアログを出す pppselect/xpppselect を同梱
+  (pon -i, pon -ix が呼ぶ)
+・モデムモニタやランチャ等では、pon -ix と poff を指定しておくとよい
+  (GNOME 使用時には、/usr/share/doc/GNOME-*/README.gz も参照)
+
+
+3. 課題と確認事項
+
+・一応 Login 認証にも対応してるけど、この場合は setuid-root で動かせら
+  れない (今の pppd の実装の限界っぽいが、回避方法はないか?)
+・epppsetup と epppselect を書いてない
+
+
+4. 更新履歴のようなもの
+
+・xpppselect を Python-2.3 に対応
+・ppp-2.4.3 に更新
+・CVS Head からいくつかマージ (無限ループ問題と linkname ロック)
+・ダイアル中に poff すると、pppd が無限ループに陥るのを修正
+・ダイアル種別の初期値を修正
+・linkname を設定するようにした
+・linkname 設定時には、すぐに linkname でのロックファイルを作るように
+  した (モデムモニタで見張る場合に便利)
+・poff 内部での処理を修正
+・poff が待たされないように、バックグラウンドに落とすようにした
+・"HIDDEN" 属性を追加 ([x]pppselect の選択肢に出なくなる)
+・PPPoE の場合の tradnet の設定についても追記 (使っている方を自動判別)
+・PPPoE の場合の Planet の設定について追記
+・PPPoE まわりの修正
+・Newという名前で作るとはまっていたのを修正
+・新規登録ができなくなっていたのを修正
+・pppsetup で、接続設定を消したりコピーしたりできるようになった
+・Login 認証後に pppd をスタートさせる設定は可能になった
+・[x]pppselect で、設定が1つしかない場合は直ちに返るようにした
+・xpppselect のリスト領域サイズをきちんと計算してみた
+・xpppselect を、キーボードでも操作可能にした
diff -uprN ppp-2.4.5/Plamo_scripts/ip-down.sh build/Plamo_scripts/ip-down.sh
--- ppp-2.4.5/Plamo_scripts/ip-down.sh	1970-01-01 09:00:00.000000000 +0900
+++ build/Plamo_scripts/ip-down.sh	2012-12-15 08:58:41.000000000 +0900
@@ -0,0 +1,17 @@
+#!/bin/sh
+#
+# ip-down: Hook on interface down
+#
+
+DEVICE="$1"
+CONFIG="$6"
+
+RESOLV=/etc/resolv.conf
+
+if [ -x /sbin/planetplugin ]; then
+  /sbin/planetplugin "$DEVICE" "$CONFIG" down
+fi
+
+sed -e "/# $DEVICE:PPP begin/,/# $DEVICE:PPP end/d" $RESOLV > $RESOLV.N
+chmod 644 $RESOLV.N
+mv $RESOLV.N $RESOLV
diff -uprN ppp-2.4.5/Plamo_scripts/ip-up.sh build/Plamo_scripts/ip-up.sh
--- ppp-2.4.5/Plamo_scripts/ip-up.sh	1970-01-01 09:00:00.000000000 +0900
+++ build/Plamo_scripts/ip-up.sh	2012-12-15 08:58:41.000000000 +0900
@@ -0,0 +1,34 @@
+#!/bin/sh
+#
+# ip-up: Hook on interface up
+#
+
+DEVICE="$1"
+CONFIG="$6"
+
+PPP_RESOLV=/etc/ppp/resolv/$CONFIG
+RESOLV=/etc/resolv.conf
+
+if [ -s "$PPP_RESOLV" ] || [ -n "$USEPEERDNS" -a -n "$DNS1$DNS2" ]; then
+  echo "# $DEVICE:PPP begin" > $RESOLV.N
+  chmod 644 $RESOLV.N
+  if [ -n "$USEPEERDNS" ]; then
+    for s in $DNS1 $DNS2; do
+      echo "nameserver $s" >> $RESOLV.N
+    done
+  else
+    grep '^nameserver ' $PPP_RESOLV >> $RESOLV.N
+  fi
+  echo "# $DEVICE:PPP end" >> $RESOLV.N
+  sed -e "/# $DEVICE:PPP begin/,/# $DEVICE:PPP end/d" $RESOLV >> $RESOLV.N
+  echo "# $DEVICE:PPP begin" >> $RESOLV.N
+  grep '^search ' $PPP_RESOLV >> $RESOLV.N
+  echo "# $DEVICE:PPP end" >> $RESOLV.N
+else
+  sed -e "/# $DEVICE:PPP begin/,/# $DEVICE:PPP end/d" $RESOLV > $RESOLV.N
+fi
+mv $RESOLV.N $RESOLV
+
+if [ -x /sbin/planetplugin ]; then
+  /sbin/planetplugin "$DEVICE" "$CONFIG" up
+fi
diff -uprN ppp-2.4.5/Plamo_scripts/poff.sh build/Plamo_scripts/poff.sh
--- ppp-2.4.5/Plamo_scripts/poff.sh	1970-01-01 09:00:00.000000000 +0900
+++ build/Plamo_scripts/poff.sh	2012-12-15 08:58:41.000000000 +0900
@@ -0,0 +1,104 @@
+#!/bin/sh
+#
+# poff: Shut down ppp connection
+#
+
+usage () {
+	cat <<-EOF
+		usage: poff [-r|-d|-c] [config]
+		       poff -a
+
+		  -r        redial
+		  -d        toggle debug option
+		  -c        renegotiate compression
+		  -a        shut down all connections
+		  (none)    shut down
+
+		  config    setting name of target connection
+		  (none)    operate only one existing connection
+	EOF
+
+	exit 0
+}
+
+SIGNALS="TERM KILL"
+MODE="any"
+
+case "$1" in
+-r)
+	SIGNALS="HUP"
+	;;
+-d)
+	SIGNALS="USR1"
+	;;
+-c)
+	SIGNALS="USR2"
+	;;
+-a)
+	MODE="all"
+	;;
+-*)
+	usage
+	;;
+esac
+shift
+
+if [ -n "$1" ]; then
+	case "$1" in
+	-*)
+		usage
+		;;
+	*)
+		if [ "$MODE" = "all" ]; then
+			usage
+		fi
+		MODE=
+		CONFIG=$1
+		;;
+	esac
+fi
+
+PIDS="`pidof pppd`"
+
+if [ -z "$PIDS" ]; then
+	echo "poff: no ppp connections found."
+	exit 1
+else
+	case "$PIDS" in
+	*\ *)
+		MULTI="yes"
+		;;
+	*)
+		MULTI=
+		;;
+	esac
+fi
+
+if [ "$MODE" = "any" -a -n "$MULTI" ]; then
+	echo "poff: cannot decide which ppp connection to operate."
+	exit 1
+fi
+
+if [ -n "$CONFIG" ]; then
+	PIDS=`ps w $PIDS | grep " call $CONFIG *\$" | awk '{ print $1 }'`
+	if [ -z "$PIDS" ]; then
+		echo "poff: no ppp connection with setting name \"$CONFIG\"."
+		exit 1
+	fi
+fi
+
+(
+	for s in $SIGNALS; do
+		kill -$s $PIDS > /dev/null 2>&1 || break
+		sleep 10
+	done
+) &
+
+while ps $PIDS > /dev/null 2>&1; do
+	sleep 1
+done
+
+# Local Variables:
+# tab-width: 2
+# sh-indentation: 2
+# End:
diff -uprN ppp-2.4.5/Plamo_scripts/pon.sh build/Plamo_scripts/pon.sh
--- ppp-2.4.5/Plamo_scripts/pon.sh	1970-01-01 09:00:00.000000000 +0900
+++ build/Plamo_scripts/pon.sh	2012-12-15 08:58:41.000000000 +0900
@@ -0,0 +1,63 @@
+#!/bin/sh
+#
+# pon: Start ppp connection
+#
+
+usage () {
+	cat <<-EOF
+		usage: pon [-i|-ix|config] [pppdopts]
+
+		  -i        select setting with tty menu
+		  -ix       select setting with X menu
+		  config    setting name of target connection
+		  (none)    use "default" setting
+
+		  pppdopts  options list for pppd
+	EOF
+
+	exit 0
+}
+
+CONFIG=
+INTERACTIVE=
+
+case "$1" in
+-i)
+	INTERACTIVE="tty"
+	;;
+-ix)
+	if [ -n "$DISPLAY" ]; then
+		INTERACTIVE="x"
+	else
+		INTERACTIVE="tty"
+	fi
+	;;
+-*)
+	usage
+	;;
+*)
+	CONFIG="${1:-default}"
+	;;
+esac
+shift
+
+case "$INTERACTIVE" in
+tty)
+	CONFIG=`/usr/bin/pppselect` || exit 0
+	;;
+x)
+	CONFIG=`/usr/bin/xpppselect` || exit 0
+	;;
+esac
+
+if [ ! -r "/etc/ppp/peers/$CONFIG" ]; then
+	echo "pon: setting \"$CONFIG\" not found."
+	exit 1
+fi
+
+exec /usr/sbin/pppd call "$CONFIG" "$@"
+
+# Local Variables:
+# tab-width: 2
+# sh-indentation: 2
+# End:
diff -uprN ppp-2.4.5/Plamo_scripts/pppselect.sh build/Plamo_scripts/pppselect.sh
--- ppp-2.4.5/Plamo_scripts/pppselect.sh	1970-01-01 09:00:00.000000000 +0900
+++ build/Plamo_scripts/pppselect.sh	2012-12-15 08:58:41.000000000 +0900
@@ -0,0 +1,73 @@
+#!/bin/sh
+
+# Select connection
+
+PPPDIR="/etc/ppp"
+CONFDIR="$PPPDIR/peers"
+DEFNAME="default"
+DEFCOMM="標準の接続"
+
+ERRTITLE="ERROR"
+ERRMSG="PPP がインストールされていません。"
+SELTITLE="PPP 接続"
+SELMSG="接続を選択してください。"
+
+read_config () {
+	CONFIG="$1"
+	COMMENT=
+	HIDDEN="Off"
+
+	eval `sed -e "/^#:/!d" -e "s/^#://" < $PPPDIR/peers/$CONFIG`
+}
+
+if [ ! -d "$PPPDIR" ]; then
+	dialog --title "$ERRTITLE" --msgbox "\n$ERRMSG\n" 7 70
+	exit 1
+fi
+
+ARGS=()
+for f in $CONFDIR/*; do
+	if [ -f "$f" ]; then
+		CONFIG="${f##*/}"
+		read_config "$CONFIG"
+		if [ "$HIDDEN" != "On" ]; then
+			case "$CONFIG" in
+			*~|*.orig|*.bak)
+				;;
+			"$DEFNAME")
+				if [ -n "$COMMENT" ]; then
+					COMMENT="$COMMENT ($DEFCOMM)"
+				else
+					COMMENT="$DEFCOMM"
+				fi
+				ARGS=("default" "$COMMENT" "${ARGS[@]}")
+				;;
+			*)
+				ARGS[${#ARGS[@]}]="$CONFIG"
+				ARGS[${#ARGS[@]}]="$COMMENT"
+				;;
+			esac
+		fi
+	fi
+done
+if [ ${#ARGS[@]} -eq 0 ]; then
+	exit 0
+fi
+
+ENTRIES=`expr ${#ARGS[@]} / 2`
+if [ $ENTRIES -eq 1 ]; then
+	echo "${ARGS[0]}"
+	exit 0
+fi
+if [ $ENTRIES -gt 16 ]; then
+	ENTRIES=16
+fi
+SELECT=$(dialog --title "$SELTITLE" --menu "\n$SELMSG\n" \
+	`expr $ENTRIES + 9` 72 `expr $ENTRIES` "${ARGS[@]}" 3>&1 1>&2 2>&3) || exit
+
+echo "$SELECT"
+
+# Local Variables:
+# tab-width: 2
+# sh-indentation: 2
+# End:
diff -uprN ppp-2.4.5/Plamo_scripts/pppsetup.sh build/Plamo_scripts/pppsetup.sh
--- ppp-2.4.5/Plamo_scripts/pppsetup.sh	1970-01-01 09:00:00.000000000 +0900
+++ build/Plamo_scripts/pppsetup.sh	2012-12-15 08:58:41.000000000 +0900
@@ -0,0 +1,1109 @@
+#!/bin/sh
+
+# Setup ppp
+
+PPPDIR="/etc/ppp"
+TMPDIR="/tmp/.pppsetup.$$"
+
+check_uid () {
+	if [ "$UID" != "0" ]; then
+		dialog --title "ERROR" \
+			--msgbox "\nroot 権限でないと実行できません。\n" 7 70
+		exit 1
+	fi
+}
+
+check_ppp () {
+	if [ ! -d "$PPPDIR" ]; then
+		dialog --title "ERROR" \
+			--msgbox "\nPPP がインストールされていません。\n" 7 70
+		exit 1
+	fi
+}
+
+check_addr () {
+	local RET=0 PIECE REST="$1." IDX=4
+
+	while [ $IDX -ne 0 ]; do
+		PIECE="${REST%%.*}"
+		REST="${REST#*.}"
+		if [ $((PIECE)) = "$PIECE" ]; then
+			if [ $PIECE -lt 0 -o $PIECE -gt 255 ]; then
+				RET=2   # illegal field
+			fi
+		else
+			RET=2     # illegal field
+		fi
+		IDX=$((IDX - 1))
+	done
+	if [ -n "$REST" ]; then
+		RET=1       # too many fields
+	fi
+	if [ $RET -ne 0 ]; then
+		dialog --title "ERROR" --msgbox "`cat <<-EOF
+
+				入力された値($1)は、IPアドレスではありません。
+
+				ここでは、192.168.1.1 のように、4個の0〜255の数値を指定する必要が
+				あります。設定内容を確認の上、もう一度入力し直してください。
+ 
+			EOF`" 10 70
+	fi
+	return $RET
+}
+
+check_planet () {
+	if [ -L "/etc/rc.d/rc.inet1" ]; then
+		test "`ls -l '/etc/rc.d/rc.inet1' | sed 's/.*-> *//'`" = "rc.inet1.planet"
+	else
+		test -x "/etc/rc.d/rc.ifctl"
+	fi
+}
+
+make_dir () {
+	if [ ! -d "$2" ]; then
+		mkdir -p "$2"
+		chown 0.0 "$2"
+		chmod $1 "$2"
+	fi
+}
+
+make_file () {
+	if [ ! -r "$2" ]; then
+		touch "$2"
+		chown 0.0 "$2"
+		chmod $1 "$2"
+	fi
+}
+
+init_pppdir () {
+	make_dir 755 $PPPDIR/chat
+	make_dir 755 $PPPDIR/peers
+	make_dir 755 $PPPDIR/resolv
+	make_file 600 $PPPDIR/pap-secrets
+	make_file 600 $PPPDIR/chap-secrets
+}
+
+make_adv_vars () {
+	ADV_VARS="HIDDEN DEBUG PPPDOPTS LINKNAME"
+	if [ "$PPPTYPE" = "Dialup" ]; then
+		ADV_VARS="$ADV_VARS MODEMINIT DIALTYPE AUTHTYPE"
+		if [ "$1" != "CHAP/PAP" ]; then
+			ADV_VARS="$ADV_VARS STARTCMD"
+		fi
+	fi
+	ADV_VARS="$ADV_VARS DOMAIN DNS"
+}
+
+make_vars () {
+	VARS="COMMENT DEVICE"
+	if [ "$PPPTYPE" = "Dialup" ]; then
+		VARS="$VARS TELNO"
+	fi
+	VARS="$VARS USERID PASSWD"
+
+	make_adv_vars all
+}
+
+set_default () {
+	COMMENT=
+	PPPTYPE="Dialup"
+	DEVICE=
+	TELNO=
+	USERID=
+	PASSWD=
+}
+
+set_adv_default () {
+	HIDDEN="Off"
+	DEBUG="Off"
+
+	if [ "$PPPTYPE" = "PPPoE" ]; then
+		PPPDOPTS=
+	else
+		PPPDOPTS="modem crtscts"
+	fi
+
+	LINKNAME="common"
+	MODEMINIT="E1"
+	DIALTYPE="Tone"
+	AUTHTYPE="CHAP/PAP"
+	STARTCMD=
+	DOMAIN=
+	DNS=
+}
+
+read_config () {
+	local SCRIPT ARGS
+
+	CONFIG="$1"
+
+	SCRIPT="`sed -e "/^#:/!d" -e "s/^#://" < $PPPDIR/peers/$CONFIG`"
+	# decide PPPTYPE value first
+	set_default
+	eval "$SCRIPT"
+	set_adv_default
+	eval "$SCRIPT"
+
+	USERID_ORIG="$USERID"
+
+	if [ "$AUTHTYPE" = "Login" ]; then
+		eval "ARGS=(`grep \"^assword:\" $PPPDIR/chat/$CONFIG`)"
+		PASSWD="${ARGS[1]}"
+	else
+		eval "ARGS=(`grep \"^'$USERID' '$CONFIG'\" $PPPDIR/pap-secrets`)"
+		PASSWD="${ARGS[2]}"
+	fi
+}
+
+write_config () {
+	local ONLYDEBUG DEBUGOPT ONLYPPPOE DEVICEOPT ONLYDIAL DIALOPT
+	local LINKNAMEOPT="${LINKNAME:+linkname \"$LINKNAME\"}"
+	local UNLESSDNS="${DNS:+#}"
+
+	init_pppdir
+
+	if [ "$DEBUG" = "On" ]; then
+		ONLYDEBUG=
+		DEBUGOPT="-v "
+	else
+		ONLYDEBUG="#"
+		DEBUGOPT=
+	fi
+
+
+	if [ "$PPPTYPE" = "PPPoE" ]; then
+		ONLYPPPOE=
+		DEVICEOPT="nic-$DEVICE"
+		ONLYDIAL="#"
+	else
+		ONLYPPPOE="#"
+		DEVICEOPT="$DEVICE"
+		ONLYDIAL=
+
+		case "$DIALTYPE" in
+		Tone)
+			DIALOPT="T"
+			;;
+		Pulse)
+			DIALOPT="P"
+			;;
+		*)
+			DIALOPT=
+			;;
+		esac
+
+		cat <<-EOF > $PPPDIR/chat/$CONFIG
+			TIMEOUT         3
+			ABORT           BUSY
+			ABORT           'NO ANSWER'
+			ABORT           'RINGING\r\n\r\nRINGING'
+			''              AT&F
+			OK-AT-OK        AT$MODEMINIT
+			TIMEOUT         60
+			OK              ATD$DIALOPT$TELNO
+			CONNECT         '\d\c'
+		EOF
+
+		if [ "$AUTHTYPE" = "Login" ]; then
+			cat <<-EOF >> $PPPDIR/chat/$CONFIG
+				ogin:--ogin:    '$USERID'
+				assword:        '$PASSWD'
+				''              '\d\c'
+			EOF
+			if [ -n "$STARTCMD" ]; then
+				echo "''              '$STARTCMD'" >> $PPPDIR/chat/$CONFIG
+			fi
+			chmod 600 $PPPDIR/chat/$CONFIG
+		else
+			chmod 644 $PPPDIR/chat/$CONFIG
+		fi
+	fi
+
+	cat <<-EOF > $PPPDIR/peers/$CONFIG
+		# Generated by pppsetup
+		# Please do not delete any of the comments!
+		#
+		#:COMMENT="$COMMENT"
+		#:PPPTYPE="$PPPTYPE"
+		#:DEVICE="$DEVICE"
+		#:TELNO="$TELNO"
+		#:USERID="$USERID"
+		#:HIDDEN="$HIDDEN"
+		#:DEBUG="$DEBUG"
+		#:PPPDOPTS="$PPPDOPTS"
+		#:LINKNAME="$LINKNAME"
+		#:MODEMINIT="$MODEMINIT"
+		#:DIALTYPE="$DIALTYPE"
+		#:AUTHTYPE="$AUTHTYPE"
+		#:STARTCMD="$STARTCMD"
+		#:DOMAIN="$DOMAIN"
+		#:DNS="$DNS"
+		${ONLYDEBUG}debug
+		${ONLYPPPOE}plugin rp-pppoe.so
+		$DEVICEOPT
+		${ONLYDIAL}115200
+		noipdefault
+		defaultroute
+		${UNLESSDNS}usepeerdns
+		${ONLYDIAL}connect "/usr/sbin/chat $DEBUGOPT-f $PPPDIR/chat/$CONFIG"
+		noauth
+		name "$USERID"
+		remotename "$CONFIG"
+		ipparam "$CONFIG"
+		$LINKNAMEOPT
+		$PPPDOPTS
+	EOF
+
+	chmod 644 $PPPDIR/peers/$CONFIG
+
+	if [ "$AUTHTYPE" = "CHAP/PAP" ]; then
+		for f in $PPPDIR/pap-secrets $PPPDIR/chap-secrets; do
+			grep -v "^'$USERID_ORIG' '$CONFIG'" < $f > $f.N
+			echo "'$USERID' '$CONFIG' '$PASSWD'" >> $f.N
+			mv -f $f.N $f
+			chmod 600 $f
+		done
+	fi
+
+	if [ -n "$DOMAIN" ]; then
+		echo "search $DOMAIN" > $PPPDIR/resolv/$CONFIG
+	else
+		echo -n > $PPPDIR/resolv/$CONFIG
+	fi
+	for s in $DNS; do
+		echo "nameserver $s" >> $PPPDIR/resolv/$CONFIG
+	done
+}
+
+delete_config () {
+	read_config "$1"
+
+	rm -f $PPPDIR/peers/$CONFIG $PPPDIR/chat/$CONFIG $PPPDIR/resolv/$CONFIG
+
+	for f in $PPPDIR/pap-secrets $PPPDIR/chap-secrets; do
+		grep -v "^'$USERID_ORIG' '$CONFIG'" < $f > $f.N
+		mv -f $f.N $f
+		chmod 600 $f
+	done
+}
+
+config_comment () {
+	local _COMMENT
+
+	_COMMENT=$(dialog --title "接続の説明" --inputbox "`cat <<-EOF
+
+			この接続設定の簡単な説明があれば入力してください。
+
+			接続の説明:
+		EOF`" 11 72 3>&1 1>&2 2>&3) || return 1
+	COMMENT_NEW=${_COMMENT}
+	MODIFIED_NEW="yes"
+}
+
+config_device () {
+	local _DEVICE
+
+	while [ 0 ]; do
+		if [ "$PPPTYPE" = "PPPoE" ]; then
+			_DEVICE=$(dialog --title "デバイス [PPPoE]" --menu "`cat <<-EOF
+
+					接続に使うイーサネットデバイスを選択してください。
+ 
+				EOF`" 14 72 5 \
+				"eth0"  "1つめの標準イーサネットデバイス" \
+				"eth1"  "2つめの標準イーサネットデバイス" \
+				"wlan0" "一部の無線LANデバイス" \
+				"ath0"  "Atheros系無線LANデバイス" \
+				"Other" "その他" 3>&1 1>&2 2>&3) || return 1
+		else
+			_DEVICE=$(dialog --title "デバイス [Dialup]" --menu "`cat <<-EOF
+
+					接続に使うシリアルデバイスを選択してください。
+ 
+				EOF`" 17 72 8 \
+				"/dev/modem"       "標準または PCMCIA接続のシリアルデバイス" \
+				"/dev/ttyS0"       "1つめの標準シリアルデバイス" \
+				"/dev/ttyS1"       "2つめの標準シリアルデバイス" \
+				"/dev/usb/ttyACM0" "USB接続のモデム" \
+				"/dev/usb/ttyUSB0" "USB接続のシリアルデバイス" \
+				"/dev/ttyLT0"      "Lucent系 Winモデム" \
+				"/dev/ttySL0"      "SmartLink系 Winモデム" \
+				"Other"            "その他" 3>&1 1>&2 2>&3) || return 1
+		fi
+
+		if [ "$_DEVICE" = "Other" ]; then
+			_DEVICE=$(dialog --title "デバイス" --inputbox "`cat <<-EOF
+
+					接続に使うデバイスの名前を入力してください。
+
+					デバイス名:
+				EOF`" 11 72 3>&1 1>&2 2>&3) || continue
+			if [ -z "$_DEVICE" ]; then
+				continue
+			fi
+		fi
+
+		if [ "$PPPTYPE" = "PPPoE" ]; then
+			if /sbin/ifconfig "$_DEVICE" > /dev/null 2>&1; then
+				break
+			fi
+
+			dialog --title "ERROR" --msgbox "`cat <<-EOF
+
+					$_DEVICE というイーサネットデバイスは存在しません。
+
+					ドライバがモジュール化されている場合は、modprobeコマンドなどでド
+					ライバをロードして、イーサネットデバイスをを認識させておく必要が
+					あります。
+
+					設定対象およびドライバを確認の上、もう一度選択し直してください。
+ 
+				EOF`" 13 70
+		else
+			case "$_DEVICE" in
+			/dev/*)
+				if [ -r "$_DEVICE" ]; then
+					break
+				fi
+				;;
+			esac
+
+			dialog --title "ERROR" --msgbox "`cat <<-EOF
+
+					$_DEVICE というデバイスファイルは存在しません。
+
+					あらかじめ、デバイスファイルを mknod で作っておくか、デバイスファ
+					イルへのシンボリックリンクを張っておくかする必要があります。
+
+					設定対象を確認の上、もう一度選択し直してください。
+ 
+				EOF`" 12 70
+		fi
+	done
+	DEVICE_NEW="$_DEVICE"
+	MODIFIED_NEW="yes"
+}
+
+config_telno () {
+	local _TELNO=
+
+	while [ -z "$_TELNO" ]; do
+		_TELNO=$(dialog --title "電話番号" --inputbox "`cat <<-EOF
+
+				PPP の接続先電話番号を入力してください。
+
+				電話番号:
+			EOF`" 11 72 3>&1 1>&2 2>&3) || return 1
+	done
+	TELNO_NEW="$_TELNO"
+	MODIFIED_NEW="yes"
+}
+
+config_userid () {
+	local _USERID=
+
+	while [ -z "$_USERID" ]; do
+		_USERID=$(dialog --title "ユーザID" --inputbox "`cat <<-EOF
+
+				PPP の接続で用いるユーザID を指定してください。
+
+				ユーザID:
+			EOF`" 11 72 3>&1 1>&2 2>&3) || return 1
+	done
+	USERID_NEW="$_USERID"
+	MODIFIED_NEW="yes"
+}
+
+config_passwd () {
+	local _PASSWD=
+
+	while [ -z "$_PASSWD" ]; do
+		_PASSWD=$(dialog --title "パスワード" --inputbox "`cat <<-EOF
+
+				PPP の接続で用いるパスワードを指定してください。
+
+				パスワード ($USERID_NEW):
+			EOF`" 11 72 3>&1 1>&2 2>&3) || return 1
+	done
+	PASSWD_NEW="$_PASSWD"
+	MODIFIED_NEW="yes"
+}
+
+config_hidden () {
+	local _HIDDEN
+
+	_HIDDEN=$(dialog --title "隠しエントリ" --menu "`cat <<-EOF
+
+			この接続を隠しエントリにしますか? 隠しエントリにすると、pon -i や
+			pon -ix 等での接続選択メニューで提示されなくなります。
+
+			PPPoE で自動的に接続される場合等は、隠しエントリにした方がいいか
+			もしれません。
+ 
+		EOF`" 15 72 2 \
+		"Off" "隠しエントリにしない" \
+		"On"  "隠しエントリにする" 3>&1 1>&2 2>&3) || return 1
+	HIDDEN_NEW="$_HIDDEN"
+	MODIFIED_NEW="yes"
+}
+
+config_debug () {
+	local _DEBUG
+
+	_DEBUG=$(dialog --title "デバッグモード" --menu "`cat <<-EOF
+
+			デバッグモードを有効にしますか? デバッグモードでは、システムログ
+			(/var/log/messages 等)に多くの情報が記録されます。
+
+			うまく接続できない場合等は有効にしてみると、より多くの情報が得ら
+			れるため、解析しやすくなります。
+ 
+		EOF`" 15 72 2 \
+		"Off" "デバッグモード無効" \
+		"On"  "デバッグモード有効" 3>&1 1>&2 2>&3) || return 1
+	DEBUG_NEW="$_DEBUG"
+	MODIFIED_NEW="yes"
+}
+
+config_pppdopts () {
+	local _PPPDOPTS
+
+	_PPPDOPTS=$(dialog --title "pppd オプション" --inputbox "`cat <<-EOF
+
+			pppd に対する追加オプションがあれば入力してください。
+
+			シリアルポートのモデム制御線を使用するかどうかを指示する "modem",
+			"local"、および、フロー制御方法を指示する "crtscts", "nocrtscts",
+			"xonxoff"、また、PPP のヘッダ圧縮を無効にする "novj" や、MRU およ
+			び MTU を指示する "mru", "mtu" 等、pppd では多くのオプションを指
+			定することができます。詳細は pppd のマニュアルを参照してください。
+
+			必要ない場合は、[Enter] を押してください。
+
+			モデム初期化コマンド:
+		EOF`" 19 72 3>&1 1>&2 2>&3) || return 1
+	PPPDOPTS_NEW="$_PPPDOPTS"
+	MODIFIED_NEW="yes"
+}
+
+config_linkname () {
+	local _LINKNAME
+
+	_LINKNAME=$(dialog --title "論理リンク名" --inputbox "`cat <<-EOF
+
+			この接続に対する論理リンク名を入力してください。
+
+			論理リンク名は、pppd の起動時に "/var/run/ppp-(論理リンク名).pid"
+			の名前で、PIDファイルを作成するために用いられます。PPP モニタ等の
+			ツールからロックファイルを監視する場合に、これを指定しておくと便
+			利です(従来、/var/lock 以下に作られるシリアルデバイスのロックファ
+			イルを指定することが多かったのですが、これでは、設定によってシリ
+			アルデバイスが変わる場合に破綻します)。なお、これはロックファイル
+			ではありませんので、排他制御には用いられません。
+
+			必要ない場合は、[Enter] を押してください。
+
+			論理リンク名:
+		EOF`" 21 72 3>&1 1>&2 2>&3) || return 1
+	LINKNAME_NEW="$_LINKNAME"
+	MODIFIED_NEW="yes"
+}
+
+config_modeminit () {
+	local _MODEMINIT
+
+	_MODEMINIT=$(dialog --title "モデム初期化コマンド" --inputbox "`cat <<-EOF
+
+			モデム初期化コマンドがあれば入力してください。先頭の "AT" は不要
+			です。
+
+			必要ない場合は、[Enter] を押してください。
+
+			モデム初期化コマンド:
+		EOF`" 14 72 3>&1 1>&2 2>&3) || return 1
+	MODEMINIT_NEW="$_MODEMINIT"
+	MODIFIED_NEW="yes"
+}
+
+config_dialtype () {
+	local _DIALTYPE
+
+	_DIALTYPE=$(dialog --title "ダイアル方法" --menu "`cat <<-EOF
+
+			ダイアル方法を選択してください。通常は Tone で構いません。
+ 
+		EOF`" 12 72 3 \
+		"Tone"  "トーン(プッシュ)回線" \
+		"Pulse" "パルス(ダイアル)回線" \
+		"ISDN"  "ISDN回線" 3>&1 1>&2 2>&3) || return 1
+	DIALTYPE_NEW="$_DIALTYPE"
+	MODIFIED_NEW="yes"
+}
+
+config_authtype () {
+	local _AUTHTYPE
+
+	_AUTHTYPE=$(dialog --title "認証方法" --menu "`cat <<-EOF
+
+			PPP接続時の認証方法を選択してください。通常は CHAP/PAP で構いませ
+			んが、古い ISP では、ログイン認証を用いている場合があります。
+
+			なお、CHAP と PAP は、接続時に適当な方を選択します。
+ 
+		EOF`" 14 72 2 \
+		"CHAP/PAP" "CHAP認証 または PAP認証 (自動選択)" \
+		"Login"    "ログイン認証" 3>&1 1>&2 2>&3) || return 1
+	AUTHTYPE_NEW="$_AUTHTYPE"
+
+	if [ "$AUTHTYPE_NEW" = "Login" ]; then
+		dialog --title "NOTICE" --msgbox "`cat <<-EOF
+
+				ログイン認証が選択されましたので、パスワードは直接 chatスクリプト
+				($PPPDIR/chat/$CONFIG) に書き込まれます。
+
+				この chatスクリプトは、スーパーユーザ以外では読めないように設定さ
+				れます。このため、pppd を root に setuid していても、一般ユーザの
+				権限で接続することはできません。
+
+				この接続は、sudo 等を用いて直接 root 権限で実行する必要があります。
+				chatスクリプトを root に setuid することは危険ですので、絶対に避
+				けてください。
+ 
+			EOF`" 16 70
+	fi
+
+	MODIFIED_NEW="yes"
+}
+
+config_startcmd () {
+	local _STARTCMD
+
+	_STARTCMD=$(dialog --title "初期実行コマンド" --inputbox "`cat <<-EOF
+
+			ダイアルアップログイン後に、リモートマシン上で実行するコマンドが
+			あれば入力してください。例えば、接続先が単なるシェルログインサー
+			ビスである場合、ログイン後に PPP デーモンを起動する必要があります。
+
+			必要ない場合は、[Enter] を押してください。
+
+			初期実行コマンド:
+		EOF`" 15 72 3>&1 1>&2 2>&3) || return 1
+	STARTCMD_NEW="$_STARTCMD"
+	MODIFIED_NEW="yes"
+}
+
+config_domain () {
+	local _DOMAIN
+
+	_DOMAIN=$(dialog --title "ドメイン名" --inputbox "`cat <<-EOF
+
+			PPP接続時に参照するドメイン名を、ISP 等から指示されている場合は、
+			それを指定してください。
+
+			ドメイン名を指定しない場合は、[Enter] を押してください。
+
+			ドメイン名:
+		EOF`" 14 72 3>&1 1>&2 2>&3) || return 1
+	DOMAIN_NEW="$_DOMAIN"
+	MODIFIED_NEW="yes"
+}
+
+config_dns () {
+	local INDEX=1 NS _DNS=
+
+	while [ 0 ]; do
+		case $INDEX in
+		1)
+			NS=$(dialog --title "ネームサーバ(1)" --inputbox "`cat <<-EOF
+
+					1番目のネームサーバの IPアドレスを指定してください。
+
+					PPP接続時にネームサーバの情報を動的に取得する場合は、[Enter] を押
+					してください。
+
+					ネームサーバ(1)の IPアドレス:
+				EOF`" 14 72 3>&1 1>&2 2>&3) || return 1
+			;;
+		2)
+			NS=$(dialog --title "ネームサーバ(2)" --inputbox "`cat <<-EOF
+
+					2番目のネームサーバの IPアドレスを指定してください。
+
+					(設定済のネームサーバ: $_DNS)
+
+					これ以上ネームサーバが無い場合は、[Enter] を押してください。
+
+					ネームサーバ(2)の IPアドレス:
+				EOF`" 15 72 3>&1 1>&2 2>&3) || return 1
+			;;
+		*)
+			break
+			;;
+		esac
+		if [ -z "$NS" ]; then
+			break
+		fi
+		if check_addr "$NS"; then
+			_DNS="$_DNS${_DNS:+ }$NS"
+			INDEX=`expr $INDEX + 1`
+		fi
+	done
+	DNS_NEW="$_DNS"
+	MODIFIED_NEW="yes"
+}
+
+advanced_menu () {
+	local ARGS ENTRIES SELECT _ADV_VARS="$ADV_VARS" MODIFIED_NEW="$MODIFIED"
+
+	for v in $ADV_VARS; do
+		vv="${v}_NEW"
+		local "$vv"="${!v}"
+	done
+
+	while [ 0 ]; do
+		ARGS=()
+		make_adv_vars "$AUTHTYPE_NEW"
+		for v in $ADV_VARS; do
+			ARGS[${#ARGS[@]}]="$v"
+			vv="${v}_NEW"
+			ARGS[${#ARGS[@]}]="${!vv}"
+		done
+		ADV_VARS="$_ADV_VARS"
+		ENTRIES=`expr ${#ARGS[@]} / 2`
+
+		SELECT=$(dialog --title "詳細設定: $CONFIG [$PPPTYPE]" --menu "`cat <<-EOF
+
+				設定を変更したい項目を選択してください。
+
+				現在の設定対象: $CONFIG [$PPPTYPE]
+ 
+			EOF`" `expr $ENTRIES + 13` 72 `expr $ENTRIES + 2` \
+			"${ARGS[@]}" \
+			"---"  "---" \
+			"Exit" "戻る" 3>&1 1>&2 2>&3) || return 1
+
+		case "$SELECT" in
+		Exit)
+			for v in $ADV_VARS; do
+				vv="${v}_NEW"
+				eval "$v=\"${!vv}\""
+			done
+			MODIFIED="$MODIFIED_NEW"
+
+			break
+			;;
+		---)
+			;;
+		*)
+			eval "config_`echo $SELECT | tr A-Z a-z`"
+			;;
+		esac
+	done
+}
+
+advanced_config () {
+	local MODIFIED="$MODIFIED_NEW"
+
+	for v in $ADV_VARS; do
+		vv="${v}_NEW"
+		local "$v"="${!vv}"
+	done
+	advanced_menu || return 1
+	for v in $ADV_VARS; do
+		vv="${v}_NEW"
+		eval "$vv=\"${!v}\""
+	done
+	MODIFIED_NEW="$MODIFIED"
+}
+
+edit_menu () {
+	local ARGS ENTRIES SELECT _PASSWD MODIFIED_NEW="$MODIFIED"
+
+	for v in $VARS $ADV_VARS; do
+		vv="${v}_NEW"
+		local "$vv"="${!v}"
+	done
+
+	while [ 0 ]; do
+		_PASSWD="$PASSWD_NEW"
+		PASSWD_NEW="********"
+
+		ARGS=()
+		for v in $VARS; do
+			ARGS[${#ARGS[@]}]="$v"
+			vv="${v}_NEW"
+			ARGS[${#ARGS[@]}]="${!vv}"
+		done
+		ENTRIES=`expr ${#ARGS[@]} / 2`
+
+		PASSWD_NEW="$_PASSWD"
+
+		SELECT=$(dialog --title "設定変更: $CONFIG [$PPPTYPE]" --menu "`cat <<-EOF
+
+				設定を変更したい項目を選択してください。
+
+				現在の設定対象: $CONFIG [$PPPTYPE]
+ 
+			EOF`" `expr $ENTRIES + 14` 72 `expr $ENTRIES + 3` \
+			"${ARGS[@]}" \
+			"---"      "---" \
+			"Advanced" "詳細設定" \
+			"Exit"     "設定を終了" 3>&1 1>&2 2>&3) || return 1
+
+		case "$SELECT" in
+		Advanced)
+			advanced_config
+			;;
+		Exit)
+			for v in $VARS $ADV_VARS; do
+				vv="${v}_NEW"
+				eval "$v=\"${!vv}\""
+			done
+			MODIFIED="$MODIFIED_NEW"
+
+			break
+			;;
+		---)
+			;;
+		*)
+			eval "config_`echo $SELECT | tr A-Z a-z`"
+			;;
+		esac
+	done
+}
+
+confirm_menu () {
+	local TEL LINES SELECT
+
+	while [ -n "$MODIFIED" ]; do
+		if [ "$PPPTYPE" = "PPPoE" ]; then
+			TEL=
+			LINES=19
+		else
+			TEL="\n  ・電話番号:   $TELNO"
+			LINES=20
+		fi
+		SELECT=$(dialog --title "確認: $CONFIG [PPPoE]" --menu "`cat <<-EOF
+
+				次の内容で接続の設定を保存してもよろしいですか?
+
+				  ・接続名:     $CONFIG [$PPPTYPE]
+				  ・接続の説明: $COMMENT
+				  ・デバイス:   $DEVICE$TEL
+				  ・ユーザID:   $USERID
+ 
+			EOF`" $LINES 72 5 \
+			"Save"     "保存して終了" \
+			"Quit"     "保存せずに終了" \
+			"---"      "---" \
+			"Advanced" "詳細設定" \
+			"Reedit"   "再編集" 3>&1 1>&2 2>&3) || return 1
+
+		case "$SELECT" in
+		Save)
+			write_config
+			break
+			;;
+		Quit)
+			break
+			;;
+		Advanced)
+			advanced_menu
+			;;
+		Reedit)
+			edit_menu
+			;;
+		esac
+	done
+}
+
+config_name () {
+	while [ 0 ]; do
+		if [ -z "$1" ]; then
+			CONFIG=$(dialog --title "新しい接続" --inputbox "`cat <<-EOF
+
+					今から作成する接続名を入力してください。
+
+					標準の接続を作成する場合は、単に [Enter] を押してください。
+
+					接続名[default]:
+				EOF`" 13 72 3>&1 1>&2 2>&3) || return 1
+			CONFIG="${CONFIG:-default}"
+		else
+			CONFIG=$(dialog --title "コピー: $1" --inputbox "`cat <<-EOF
+
+					コピー先の接続名を入力してください。
+
+					中止する場合は、単に [Enter] を押してください。
+
+					接続名:
+				EOF`" 13 72 3>&1 1>&2 2>&3) || return 1
+
+			if [ -z "$CONFIG" ]; then
+				return 1
+			fi
+		fi
+
+		case "$CONFIG" in
+		*/*)
+			dialog --title "ERROR" --msgbox "`cat <<-EOF
+
+					接続名に "/" を含めることはできません。
+
+					別の名前で入力し直してください。
+ 
+				EOF`" 9 70
+
+			continue
+			;;
+		*~|*.orig|*.bak)
+			dialog --title "ERROR" --msgbox "`cat <<-EOF
+
+					入力された接続名は、バックアップファイル用に予約されています。
+
+					別の名前で入力し直してください。
+ 
+				EOF`" 9 70
+
+			continue
+			;;
+		esac
+
+		if [ -r "/etc/ppp/peers/$CONFIG" ]; then
+			dialog --title "ERROR" --msgbox "`cat <<-EOF
+
+					$CONFIG という名前の接続はすでに存在します。
+
+					別の名前で入力し直してください。
+ 
+				EOF`" 9 70
+
+			continue
+		fi
+
+		mkdir -p "$TMPDIR"
+		touch "$TMPDIR/$CONFIG" > /dev/null 2>&1
+		if [ ! -f "$TMPDIR/$CONFIG" ]; then
+			rm -f "$TMPDIR/$CONFIG" > /dev/null 2>&1
+			rmdir "$TMPDIR" > /dev/null 2>&1
+			dialog --title "ERROR" --msgbox "`cat <<-EOF
+
+					接続名に、ファイル名として許されていない文字が含まれています。
+
+					別の名前で入力し直してください。
+ 
+				EOF`" 9 70
+
+			continue
+		fi
+		rm -f "$TMPDIR/$CONFIG" > /dev/null 2>&1
+		rmdir "$TMPDIR" > /dev/null 2>&1
+
+		break
+	done
+}
+
+new_config () {
+	config_name || return 1
+	config_comment || return 1
+
+	PPPTYPE=$(dialog --title "接続の種類" --menu "`cat <<-EOF
+
+			接続の種類を選択してください。
+ 
+		EOF`" 11 72 2 \
+		"Dialup" "ダイアルアップ接続" \
+		"PPPoE"  "PPPoE接続" 3>&1 1>&2 2>&3) || return 1
+
+	config_device || return 1
+
+	if [ "$PPPTYPE" = "PPPoE" ]; then
+		if check_planet; then
+			dialog --title "NOTICE" --msgbox "`cat <<-EOF
+
+					$DEVICE_NEW 上での PPPoE を選択しました。
+
+					netconfig 等で、PPPoE 用の設定を行なっておいてください。自動的に
+					PPPoE の接続や切断を行なうように設定した場合は、詳細設定メニュー
+					内の「HIDDEN」の設定を有効にすることで、pon -i 等でのメニューの選
+					択肢に出ないようにすることも可能です。
+
+					ルータとして使用する場合等、NAT やパケットフィルタリング等の設定
+					が必要な場合は、/etc/rc.d/rc.inet1.sub に追加してください。
+ 
+				EOF`" 15 70
+		else
+			dialog --title "NOTICE" --msgbox "`cat <<-EOF
+
+					$DEVICE_NEW 上での PPPoE を選択しました。
+
+					/etc/rc.d/rc.inet1 で、以下のように設定してください。
+
+					  1:echo 1 > /proc/sys/net/ipv4/ip_forward
+					  2:iptables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE
+					  3:iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS
+					    --clamp-mss-to-pmtu
+					  4:ifconfig $DEVICE_NEW up 0.0.0.0
+					  5:pon $CONFIG
+
+					ルータとして使用する場合、1〜3行目 (2行目は NAT を使う場合のみ)が
+					必要です。パケットフィルタの設定は、3行目の後に追加してください。
+					5行目は、起動時に自動的に PPPoE の接続を行なう場合のみ必要です。
+					この場合、詳細設定メニュー内の「HIDDEN」の設定を有効にすることで、
+					pon -i 等でのメニューの選択肢に出ないようにすることも可能です。
+ 
+				EOF`" 22 70
+		fi
+	else
+		config_telno || return 1
+	fi
+
+	config_userid || return 1
+	config_passwd || return 1
+
+	make_vars
+	for v in $VARS; do
+		vv="${v}_NEW"
+		eval "$v=\"${!vv}\""
+	done
+	set_adv_default
+
+	USERID_ORIG="$USERID"
+	MODIFIED="yes"
+
+	confirm_menu || return 1
+}
+
+select_menu () {
+	local SELECT
+
+	SELECT=$(dialog --title "$1" --menu "`cat <<-EOF
+
+			接続 $1 に対する操作を指定してください。
+ 
+		EOF`" 12 72 3 \
+		"Edit"   "編集" \
+		"Copy"   "コピー" \
+		"Delete" "削除" 3>&1 1>&2 2>&3) || return 1
+
+	case "$SELECT" in
+	Edit)
+		MODIFIED=
+		read_config "$1"
+		make_vars
+		edit_menu || return 1
+		confirm_menu || return 1
+		;;
+	Copy)
+		read_config "$1"
+		config_name "$1" || return 1
+		write_config
+		;;
+	Delete)
+		dialog --title "確認" --yesno "`cat <<-EOF
+
+				接続 $1 の設定を削除してもよろしいですか?
+				この操作は取り消すことができません。
+ 
+			EOF`" 8 71 || return 1
+
+		delete_config "$1"
+		;;
+	esac
+}
+
+init_config () {
+	dialog --title "PPP の設定" --yesno "`cat <<-EOF
+
+			新しくダイアルアップ接続または PPPoE接続の設定を作成します。
+
+			設定情報は $PPPDIR 以下に保存されます。ここで作成した接続の設定
+			名を ponコマンドに指定することで、PPP接続を開始できます。切断する
+			場合は poffコマンドを実行してください。
+
+			一般ユーザに PPP接続を許可する場合は、sudo 等を用いて root 権限で
+			実行させるか、pppd を root に setuid してグループでの実行権限を調
+			整するかしてください。
+
+			設定を開始してもよろしいですか?
+ 
+		EOF`" 17 71 || return 1
+
+	new_config || return 1
+}
+
+main_menu () {
+	local STARTUP="yes" ARGS CONFIG COMMENT HEADING ENTRIES SELECT
+
+	while [ 0 ]; do
+		ARGS=()
+		for f in $PPPDIR/peers/*; do
+			if [ -f "$f" ]; then
+				CONFIG="${f##*/}"
+				read_config "$CONFIG"
+				if [ "$HIDDEN" = "On" ]; then
+					HEADING="-"
+				else
+					HEADING="+"
+				fi
+				case "$CONFIG" in
+				*~|*.orig|*.bak)
+					;;
+				default)
+					if [ -n "$COMMENT" ]; then
+						COMMENT="$COMMENT (標準の接続)"
+					else
+						COMMENT="標準の接続"
+					fi
+					ARGS=("${HEADING}default" "$COMMENT" "${ARGS[@]}")
+					;;
+				*)
+					ARGS[${#ARGS[@]}]="${HEADING}$CONFIG"
+					ARGS[${#ARGS[@]}]="$COMMENT"
+					;;
+				esac
+			fi
+		done
+		if [ ${#ARGS[@]} -gt 0 ]; then
+			ARGS=("${ARGS[@]}" "---" "---")
+		elif [ -n "$STARTUP" ]; then
+			init_config || exit
+			continue
+		fi
+
+		STARTUP=
+		ENTRIES=`expr ${#ARGS[@]} / 2`
+		if [ $ENTRIES -gt 12 ]; then
+			ENTRIES=12
+		fi
+		SELECT=$(dialog --title "PPP の設定" --menu "`cat <<-EOF
+
+				設定を操作したい接続を選択してください。
+				新しい接続の設定を行ないたい場合は、New を選択してください。
+ 
+			EOF`" `expr $ENTRIES + 11` 72 `expr $ENTRIES + 1` \
+			"${ARGS[@]}" \
+			"New" "新しい接続" 3>&1 1>&2 2>&3) || exit
+
+		case "$SELECT" in
+		New)
+			new_config
+			;;
+		---)
+			;;
+		*)
+			select_menu "${SELECT#[-+]}"
+			;;
+		esac
+	done
+}
+
+check_uid
+check_ppp
+main_menu
+
+# Local Variables:
+# tab-width: 2
+# sh-indentation: 2
+# End:
diff -uprN ppp-2.4.5/Plamo_scripts/xpppselect.py build/Plamo_scripts/xpppselect.py
--- ppp-2.4.5/Plamo_scripts/xpppselect.py	1970-01-01 09:00:00.000000000 +0900
+++ build/Plamo_scripts/xpppselect.py	2012-12-15 08:58:41.000000000 +0900
@@ -0,0 +1,271 @@
+#!/usr/bin/python
+# coding=euc-jp
+
+# Select connection (for X)
+
+PPPDIR = u'/etc/ppp'
+CONFDIR = PPPDIR + u'/peers'
+DEFNAME = u'default'
+DEFCOMM = unicode("標準の接続", 'euc-jp')
+
+ERRTITLE = u"ERROR"
+ERRMSG = unicode("PPP がインストールされていません。", 'euc-jp')
+SELTITLE = unicode("PPP 接続", 'euc-jp')
+SELMSG = unicode("接続を選択してください。", 'euc-jp')
+
+import os
+import stat
+import sys
+import re
+
+if os.environ.has_key('DISPLAY') and os.environ['DISPLAY']:
+	if not sys.modules.has_key('gtk'):
+		try:
+			import pygtk
+			pygtk.require('2.0')
+		except ImportError:
+			pass
+	import gtk
+	import pango
+	import gobject
+	gtk.rc_parse(os.path.expanduser('~/.gtkrc-2.0'))
+else:
+	sys.stderr.write("Error: cannot open display!\n")
+	sys.exit(1)
+
+class Dialog:
+	def __init__(self, title, use_cancel):
+		self.status = 1
+
+		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
+		self.window.set_title(title)
+		self.window.set_wmclass("xpppselect", "Xpppselect")
+		self.window.set_border_width(5)
+		self.window.set_resizable(False)
+		self.window.connect("destroy", gtk.main_quit)
+
+		self.vbox = gtk.VBox(spacing = 3)
+		self.window.add(self.vbox)
+
+		box = gtk.HButtonBox()
+		box.set_layout(gtk.BUTTONBOX_SPREAD)
+		box.set_spacing(5)
+		self.vbox.pack_end(box)
+
+		self.ok_button = gtk.Button(u'OK')
+		self.ok_button.connect_after("clicked", self.ok)
+		box.pack_start(self.ok_button)
+		self.ok_button.show()
+
+		if use_cancel:
+			self.cancel_button = gtk.Button(u'Cancel')
+			self.cancel_button.connect_after("clicked", self.cancel)
+			box.pack_start(self.cancel_button)
+			self.cancel_button.show()
+
+		box.show()
+		self.vbox.show()
+
+	def ok(self, *args):
+		self.status = 0
+		self.window.destroy()
+
+	def cancel(self, *args):
+		self.status = 1
+		self.window.destroy()
+
+	def add(self, w, expand = False):
+		self.vbox.pack_start(w, expand)
+
+	def show(self):
+		self.window.show()
+		self.window.window.set_decorations(gtk.gdk.DECOR_TITLE |
+										   gtk.gdk.DECOR_BORDER)
+
+	def run_modal(self):
+		self.window.grab_add()
+		try:
+			gtk.main()
+		except KeyboardInterrupt:
+			pass
+
+		return self.status
+
+class Msgbox(Dialog):
+	def __init__(self, title, msg):
+		Dialog.__init__(self, title, False)
+
+		w = gtk.Label(msg)
+		self.add(w)
+		w.show()
+
+		self.show()
+
+class Menubox(Dialog):
+	def __init__(self, title, msg, max, default, default_comment, entries):
+		self.select = None
+
+		model = gtk.ListStore(gobject.TYPE_STRING, gobject.TYPE_STRING)
+		for entry in entries:
+			if entry.name == default:
+				iter = model.prepend()
+				if entry.comment:
+					comment = entry.comment + u' (%s)' % default_comment
+				else:
+					comment = default_comment
+			else:
+				iter = model.append()
+				comment = entry.comment
+			model.set_value(iter, 0, entry.name)
+			model.set_value(iter, 1, comment)
+
+		Dialog.__init__(self, title, True)
+		self.ok_button.connect("clicked", self.set_select)
+
+		w = gtk.Label(msg)
+		self.add(w)
+		w.show()
+
+		swin = gtk.ScrolledWindow()
+		total = len(entries)
+		if total > max:
+			rows = max
+			scroll = True
+		else:
+			rows = total
+			scroll = False
+		swin.set_policy(gtk.POLICY_NEVER, gtk.POLICY_NEVER)
+		swin.set_shadow_type(gtk.SHADOW_ETCHED_IN)
+		self.add(swin, True)
+
+		tree = gtk.TreeView(model)
+		tree.set_headers_visible(False)
+		tree.connect("row-activated", self.activate)
+		swin.add(tree)
+
+		self.selection = tree.get_selection()
+		self.selection.set_mode(gtk.SELECTION_SINGLE)
+		margin = tree.get_style().ythickness
+
+		col = gtk.TreeViewColumn("", gtk.CellRendererText(), text = 0)
+		col.set_resizable(True)
+		col.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)
+		tree.append_column(col)
+
+		col = gtk.TreeViewColumn("", gtk.CellRendererText(), text = 1)
+		col.set_resizable(True)
+		col.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)
+		tree.append_column(col)
+
+		tree.show()
+		swin.show()
+
+		full = swin.size_request()[1]
+		swin.set_size_request(-1, full / total * rows + margin)
+		if scroll:
+			swin.set_policy(gtk.POLICY_NEVER, gtk.POLICY_ALWAYS)
+
+		self.show()
+
+	def set_select(self, *args):
+		selected = self.selection.get_selected()
+		if selected:
+			store, iter = selected
+			self.select = store.get_value(iter, 0)
+
+	def activate(self, *args):
+		self.set_select()
+		if self.select:
+			self.ok()
+
+	def run_modal(self):
+		if Dialog.run_modal(self):
+			return None
+		else:
+			return self.select
+
+class Param:
+	def __init__(self, name, initval):
+		self.regex = re.compile('^#:' + name +
+								'=(?:(["\'])(.*?)\\1|([^"\'].*))$')
+		self.oldval = initval
+
+	def parse(self, line):
+		m = self.regex.match(line)
+		if m:
+			self.oldval = m.group(2) or m.group(3)
+		return self.oldval
+
+class Config:
+	def __init__(self, dir, name):
+		self.name = name
+		self.comment = ''
+		self.hidden = 'Off'
+
+		ignore = re.compile('(~|\.(orig|bak))$')
+		if ignore.search(name):
+			self.name = None
+			self.comment = None
+			return
+
+		comment = Param('COMMENT', self.comment)
+		hidden = Param('HIDDEN', self.hidden)
+		try:
+			f = None
+			f = open(dir + u'/' + name)
+			for line in [unicode(l, 'euc-jp') for l in f.readlines()]:
+				self.comment = comment.parse(line)
+				self.hidden = hidden.parse(line)
+			f.close()
+		except OSError:
+			self.name = None
+			self.comment = None
+			if f:
+				f.close()
+			return
+
+	def isvalid(self):
+		if self.name and self.hidden != 'On':
+			return True
+		else:
+			return False
+
+def main():
+	try:
+		st = os.stat(PPPDIR)
+	except OSError:
+		st = None
+	if not st or not stat.S_ISDIR(st.st_mode):
+		Msgbox(ERRTITLE, ERRMSG).run_modal()
+		sys.exit(1)
+
+	try:
+		files = os.listdir(CONFDIR)
+		files.sort()
+	except OSError:
+		files = []
+	configs = filter(Config.isvalid, [Config(CONFDIR, name) for name in files])
+
+	if not configs:
+		sys.exit(0)
+
+	if len(configs) == 1:
+		print configs[0].name.encode('euc-jp')
+		sys.exit(0)
+
+	select = Menubox(SELTITLE, SELMSG, 16,
+					 DEFNAME, DEFCOMM, configs).run_modal()
+
+	if not select:
+		sys.exit(1)
+
+	print select.encode('euc-jp')
+	sys.exit(0)
+
+##
+main()
+
+# Local Variables:
+# indent-tabs-mode: t
+# tab-width: 4
+# py-indent-offset: 4
diff -uprN ppp-2.4.5/linux/Makefile.top build/linux/Makefile.top
--- ppp-2.4.5/linux/Makefile.top	2009-11-17 07:26:07.000000000 +0900
+++ build/linux/Makefile.top	2012-12-15 08:56:41.000000000 +0900
@@ -16,7 +16,7 @@ all:
 	cd pppstats; $(MAKE) $(MFLAGS) all
 	cd pppdump; $(MAKE) $(MFLAGS) all
 
-install: $(BINDIR) $(MANDIR)/man8 install-progs install-devel
+install: $(BINDIR) $(MANDIR)/man8 install-progs
 
 install-progs:
 	cd chat; $(MAKE) $(MFLAGS) install
diff -uprN ppp-2.4.5/pppd/Makefile.linux build/pppd/Makefile.linux
--- ppp-2.4.5/pppd/Makefile.linux	2009-11-17 07:26:07.000000000 +0900
+++ build/pppd/Makefile.linux	2012-12-15 08:56:41.000000000 +0900
@@ -201,7 +201,7 @@ install: pppd
 	mkdir -p $(BINDIR) $(MANDIR)
 	$(EXTRAINSTALL)
 	$(INSTALL) -s -c -m 555 pppd $(BINDIR)/pppd
-	if chgrp pppusers $(BINDIR)/pppd 2>/dev/null; then \
+	if chgrp tty $(BINDIR)/pppd 2>/dev/null; then \
 	  chmod o-rx,u+s $(BINDIR)/pppd; fi
 	$(INSTALL) -c -m 444 pppd.8 $(MANDIR)
 
