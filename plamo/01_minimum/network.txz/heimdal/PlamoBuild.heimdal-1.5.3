#!/bin/sh
##############################################################
url='http://www.h5l.org/dist/src/heimdal-1.5.3.tar.gz'
pkgbase=heimdal
vers=1.5.3
arch=`uname -m`
# arch=i586
build=P1
src=heimdal-1.5.3
OPT_CONFIG='--disable-static --enable-shared --with-sqlite3=/usr '
DOCS='ChangeLog ChangeLog.1998 ChangeLog.1999 ChangeLog.2000 ChangeLog.2001 ChangeLog.2002 ChangeLog.2003 ChangeLog.2004 ChangeLog.2005 ChangeLog.2006 LICENSE NEWS README TODO'
patchfiles=''
compress=txz
##############################################################

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_all() {
  for chk in `find . ` ; do
    chk_elf=`file $chk | grep ELF`
    if [ "$chk_elf.x" != ".x" ]; then
      chk_lib=`echo $chk | grep lib`
      if [ "$chk_lib.x" != ".x" ]; then
         echo "stripping $chk with -g "
         strip -g $chk
      else
         echo "stripping $chk"
         strip $chk
      fi
    fi
  done
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    # files=`ls -a --indicator-style=none | tail -n+3`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress_all() {
  cd $P
  strip_all
}  

W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} 
  if [ $arch = "x86_64" ]; then
      B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
  else
      B[$i]=$W/build32`test ${#src[@]} -eq 1 || echo $i`
  fi      
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
xmandir=$P/usr/X11R7/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build

if [ $arch = "x86_64" ]; then
    libdir="lib64"
    suffix="64"
else
    libdir="lib"
    suffix=""
fi

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then wget $i ; fi
  done
  for i in $url ; do
    case ${i##*.} in
    tar) tar xvpf ${i##*/} ;;
    gz) tar xvpzf ${i##*/} ;;
    bz2) tar xvpjf ${i##*/} ;;
    esac
  done
fi

if [ $opt_config -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  done
######################################################################
# * ./configure を行う前に適用したい設定やパッチなどがある場合はここに
#   記述します。
######################################################################
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for patch in $patchfiles ; do
       patch -p1 < $W/$patch
    done

    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi

      if [ -x configure ] ; then
         export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
         export LDFLAGS='-Wl,--as-needed' 
         export CC="gcc -isystem /usr/include" 
         export CXX="g++ -isystem /usr/include"
         ./configure --prefix=/usr/heimdal --libdir=/usr/heimdal/${libdir} --infodir=/usr/share/info --sysconfdir=/etc --localstatedir=/var --mandir=/usr/share/man ${OPT_CONFIG[$i]}
     fi
      if [ $? != 0 ]; then
	  echo "configure error. $0 script stop"
	  exit 255
      fi
  done
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      export LDFLAGS='-Wl,--as-needed'
      make -j3
    fi
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      export LDFLAGS='-Wl,--as-needed'
      make install DESTDIR=$P
    fi
    mkdir -p $P/etc
    cp krb5.conf $P/etc

  done
######################################################################
# * make install でコピーされないファイルがある場合はここに記述します。
######################################################################
  mkdir -p $docdir/$src
  mkdir -p $P/etc/profile.d
  mkdir -p $P/etc/rc.d/init.d

  cat <<"EOF" > $P/etc/profile.d/heimdal.csh
# add /usr/heimdal/bin to $PATH for tcsh
set HEIMDAL=/usr/heimdal

if ($?PATH) then
  set path = ( $path $HEIMDAL/bin  )
else
  set path = ( /bin /usr/bin $HEIMDAL/bin )
endif
if ( `id -u` == 0 ) then
  setenv PATH $PATH:$HEIMDAL/sbin
endif

EOF
  cat <<"EOF" > $P/etc/profile.d/heimdal.sh
# add /usr/heimdal/bin to $PATH for bash
HEIMDAL=/usr/heimdal

if [ "_$PATH" != "_" ]; then
  PATH=$PATH:$HEIMDAL/bin
else
  PATH=/bin:/usr/bin:$HEIMDAL/bin
fi
if [ `id -u` = 0 ]; then
  PATH=$PATH:$HEIMDAL/sbin
fi
export PATH 
EOF

  cat <<"EOF" > $P/etc/rc.d/init.d/heimdal
#!/bin/sh -f
#
# description: The Heimdal Kerberos5 KDC Master server and its administration daemons.
# processname: heimdal
# chkconfig: 2345 11 89
#
# Creation:	1997-04-10
# Auther:	JuK
# HISTORY
# 2006-01-02	JuK	port to Heimdal on Plamo Linux
# 2001-10-01	JuK	port to RH7.1
# 
KDC=/usr/heimdal/libexec/kdc
kdcdaemon="heimdal(Kerberos 5 KDC)"
KADMIND=/usr/heimdal/libexec/kadmind
kdmdaemon="kadmind(Kerberos DB admin. daemon)"
KPASSWDD=/usr/heimdal/libexec/kpasswdd
kpwdaemon="kpasswdd(Kerberos password daemon)"

kdcpid=`ps ax | grep $KDC  | grep -v grep |  sed -e 's/^  *//' -e 's/ .*//' `
kdmpid=`ps ax | grep $KADMIND  | grep -v grep |  sed -e 's/^  *//' -e 's/ .*//' `
kpwpid=`ps ax | grep $KPASSWDD  | grep -v grep |  sed -e 's/^  *//' -e 's/ .*//' `

#
# start or stop kdc (KDC)
# start or stop kadmind (Kerberos DB admin. daemon)
# start or stop kpasswdd (Kerberos password daemon)
#
case $1 in
'start')
	if [ -f $KDC ]; then
		if [ "X$kdcpid" = "X" ]; then
			$KDC &
			echo "$0: $kdcdaemon started."
			kdcpid=`ps ax | grep $KDC  | grep -v grep |  sed -e 's/^  *//' -e 's/ .*//' `
			echo "$0: Proccess ID = $kdcpid"
		else
			echo "$0: $kdcdaemon is ALREADY running(PID = $kdcpid)."
		fi
	else
		echo "$0: $KDC does NOT exist."
		exit 1
	fi

	if [ -f $KADMIND ]; then
		if [ "X$kdmpid" = "X" ]; then
			$KADMIND &
			echo "$0: $kdmdaemon started."
			kdmpid=`ps ax | grep $KADMIND  | grep -v grep |  sed -e 's/^  *//' -e 's/ .*//' `
			echo "$0: Proccess ID = $kdmpid"
		else
			echo "$0: $kdmdaemon is ALREADY running(PID = $kdmpid)."
		fi
	else
		echo "$0: $KADMIND does NOT exist."
		exit 1
	fi

	if [ -f $KPASSWDD ]; then
		if [ "X$kpwpid" = "X" ]; then
			$KPASSWDD &
			echo "$0: $kpwdaemon started."
			kpwpid=`ps ax | grep $KPASSWDD  | grep -v grep |  sed -e 's/^  *//' -e 's/ .*//' `
			echo "$0: Proccess ID = $kpwpid"
		else
			echo "$0: $kpwdaemon is ALREADY running(PID = $kpwpid)."
		fi
	else
		echo "$0: $KPASSWDD does NOT exist."
		exit 1
	fi
	;;
'stop')
	if [ -f $KDC ]; then
		if [ "X$kdcpid" != "X" ]; then
			/bin/kill $kdcpid
			echo "$0: $kdcdaemon has been killed."
		else
			echo "$0: $kdcdaemon is NOT running."
		fi
	fi

	if [ -f $KADMIND ]; then
		if [ "X$kdmpid" != "X" ]; then
			/bin/kill $kdmpid
			echo "$0: $kdmdaemon has been killed."
		else
			echo "$0: $kdmdaemon is NOT running."
		fi
	fi

	if [ -f $KPASSWDD ]; then
		if [ "X$kpwpid" != "X" ]; then
			/bin/kill $kpwpid
			echo "$0: $kpwdaemon has been killed."
		else
			echo "$0: $kpwdaemon is NOT running."
		fi
	fi
        ;;
*)
        echo "usage: $0 {start|stop}"
	# check kdc
	if [ "X$kdcpid" != "X" ]; then
		echo "$0: $kdcdaemon is ALREADY running(PID = $kdcpid)."
	else
		echo "$0: $kdcdaemon is NOT running."
	fi

	# check kadmind
	if [ "X$kdmpid" != "X" ]; then
		echo "$0: $kdmdaemon is ALREADY running(PID = $kdmpid)."
	else
		echo "$0: $kdmdaemon is NOT running."
	fi

	# check kpasswdd
	if [ "X$kpwpid" != "X" ]; then
		echo "$0: $kpwdaemon is ALREADY running(PID = $kpwpid)."
	else
		echo "$0: $kpwdaemon is NOT running."
	fi
	exit 1
	;;
esac
exit 0
EOF
  cp etc/services.append $P/etc/services.append-kerberos

  chk_me=`whoami | grep root`
  if [ "$chk_me.x" != ".x" ]; then
      chown -R root.root $P/etc
  fi

  mkdir $P/install
  cat <<EOF > $P/install/initpkg
if [ -d /usr/${libdir}/pkgconfig ]; then
   ( cd /usr/${libdir}/pkgconfig  ; ln -sf /usr/heimdal/${libdir}/pkgconfig/heimdal-gssapi.pc . )
fi

/sbin/mkinfodir
EOF


# remove locales except ja
# 
  if [ -d $P/usr/share/locale ]; then
    pushd $P/usr/share/locale  
    for loc in * ; do
        if [ "$loc" != "ja" ]; then
            rm -rf $P/usr/share/locale/$loc
        fi
    done
    popd
  fi

######################################################################
# path に lib があるバイナリは strip -g, ないバイナリは strip する
######################################################################
  cd $P
  compress_all
######################################################################
# * compress 対象以外で圧縮したいディレクトリやファイルがある場合はここ
#   に記述します(strip_{bin,lib}dir や gzip_{dir,one} を使います)。
# * 他のアーカイブから追加したいファイルがある場合はここに記述します。
######################################################################
  cd $W
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      touch -t `date '+%m%d0900'` $docdir/$src/$myname
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done

  for patch in $patchfiles ; do
      cp $W/$patch $docdir/$src/$patch
      gzip_one $docdir/$src/$patch
  done

  (cd $P/usr/share/man/man5; rm -f qop.5; ln -sf mech.5 qop.5)
  if [ $arch = "x86_64" ]; then
      (cd $P/usr/share/man/cat5; rm -f mech.5; cp $W/build/lib/gssapi/mech/mech.cat5 mech.5)
  else
      (cd $P/usr/share/man/cat5; rm -f mech.5; cp $W/build32/lib/gssapi/mech/mech.cat5 mech.5)
  fi
  (cd $P/usr/share/man/cat5; rm -f qop.5; ln -sf mech.5 qop.5)
######################################################################
# * convert 対象以外で刈り取りたいシンボリックリンクがある場合はここに
#   記述します(prune_symlink を使います)。
# * 完成した作業ディレクトリから tar イメージを作成する手順を以降に記述
#   します(こだわりを求めないなら単に makepkg でも良いです)。
######################################################################
# tar cvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
# tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
# tar rvpf $pkg.tar -C $P usr/share/doc/$src
# touch -t `date '+%m%d0900'` $pkg.tar ; gzip $pkg.tar ; touch $pkg.tar.gz
# mv $pkg.tar.gz $pkg.tgz
  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
