#!/bin/sh
unset LS_BLOCK_SIZE
##############################################################
pkgbase='firefox'
vers='59.0'
commitid="c61f5f5ead48c78a80c80db5c489bdc7cfaf8175"
url="https://hg.mozilla.org/releases/mozilla-release/archive/${commitid}.tar.bz2"
langpack_ja="https://ftp.mozilla.org/pub/firefox/releases/${vers}/linux-x86_64/xpi/ja.xpi"
verify=""
digest=""
arch=`uname -m`
build=B1
src="${pkgbase}-${vers}"
src="mozilla-release-${commitid}"
OPT_CONFIG=
DOCS='AUTHORS LICENSE README.txt other-licenses sourcestamp.txt'
#blfspatch="http://www.linuxfromscratch.org/patches/blfs/svn/firefox-${vers}-system_graphite2_harfbuzz-1.patch"
blfspatch="http://www.linuxfromscratch.org/patches/blfs/svn/firefox-59.0-system_graphite2_harfbuzz-1.patch"
patchfiles="${blfspatch##*/} no-crmf.diff"
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  if [ ! -f ${pkgbase}-${vers}.tar.bz2 ]; then
    wget -O ${pkgbase}-${vers}.tar.bz2 $url
  fi
  tar xvf ${pkgbase}-${vers}.tar.bz2
  if [ ! -f ${blfspatch##*/} ]; then
    wget $blfspatch
  fi
  if [ ! -f ${langpack_ja##*/} ]; then
    wget $langpack_ja
  fi
fi

if [ $opt_config -eq 1 ] ; then
  if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################
  cd $S
  for patch in $patchfiles ; do
    if [ ! -f .${patch} ]; then
      patch -p1 < $W/$patch
      touch .${patch}
    fi
  done
  rm -f $S/.mozconfig
  cp -v $W/mozconfig $S/.mozconfig
  mkdir -p path
  if [ ! -h path/python ]; then
    ln -s /usr/bin/python2 path/python
  fi

  # branding
  # 
  sed -i \
      -e "s|Mozilla|Plamo Linux Project|g" \
      -e "s|Nightly|Plamo Browser|g" \
      -e 's|\(.*trademarkInfo.part1.*"\).*">|\1Plamo Linux Project">|g' \
      browser/branding/unofficial/locales/en-US/*

  cp -v browser/branding/unofficial/locales/en-US/brand.* browser/branding/nightly/locales/en-US/
fi
    
if [ $opt_build -eq 1 ] ; then
  cd $S
  export PATH="$S/path:$PATH"
  ./mach build
  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $S
  export LDFLAGS='-Wl,--as-needed'
  DESTDIR=$P ./mach install

  # plugin
  install -dm755 -v $P/usr/${libdir}/mozilla/plugins
  ln -sfv ../../mozilla/plugins /usr/${libdir}/firefox-${vers}/browser

  # config to docdir
  install -Dm644 -v $W/mozconfig $docdir/$src/mozconfig

  # desktop file
  install -Dm644 -v $W/firefox.desktop $P/usr/share/applications/firefox.desktop
  install -Dm644 -v $W/firefox.desktop $docdir/$src/firefox.desktop

  # icon
  install -dm755 -v $P/usr/share/pixmaps
  ln -sfv /usr/${libdir}/firefox/browser/icons/mozicon128.png \
     $P/usr/share/pixmaps/firefox.png

  # lang pack
  sh $W/langpack.sh $W
  install -Dm644 -v $W/ja.xpi.plamo \
	  $P/usr/${libdir}/firefox/browser/extensions/langpack-ja@firefox.mozilla.org.xpi
  install -Dm644 -v $W/vendor.js \
          $P/usr/${libdir}/firefox/browser/defaults/preferences/vendor.js
  install -Dm644 -v $W/vendor.js \
	  $docdir/$src/vendor.js

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
