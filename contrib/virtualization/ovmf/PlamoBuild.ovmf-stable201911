#!/bin/sh
##############################################################
pkgbase="ovmf"
vers="stable201911"
openssl_vers="1.1.1b"
urls=(https://github.com/tianocore/edk2/archive/edk2-${vers}.tar.gz
      https://www.openssl.org/source/openssl-${openssl_vers}.tar.gz)
url=""
verify=""
digest=""
arch=`uname -m`
build=B2
src="edk2-edk2-${vers}"
OPT_CONFIG="--disable-static --enable-shared"
DOCS="License-History.txt License.txt Maintainers.txt Readme.md pip-requirements.txt"
patchfiles=""
# specifies files that are not in source archive and patchfiles
addfiles="60-edk2-ovmf-x86_64.json"
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    for f in ${urls[@]}
    do
        if [ ! -f ${f##*/} ]; then
            wget $f
        fi
        tar xvf ${f##*/}
    done
fi

if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done



    if [ -d $B ] ; then rm -rf $B ; fi ; cp -a $W/$src $B
    cd $B
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p1 < $W/$patch
            touch .${patch}
        fi
    done
    rm -rvf CryptoPkg/Library/OpensslLib/openssl
    ln -svf $W/openssl-${openssl_vers} CryptoPkg/Library/OpensslLib/openssl
fi

if [ $opt_build -eq 1 ] ; then
    cd $B 
    make -C BaseTools
    if [ $? != 0 ]; then
        echo "build error. $0 script stop"
        exit 255
    fi
    pwd
    export EDK_TOOLS_PATH=$B/BaseTools
    . $B/edksetup.sh BaseTools

    ./BaseTools/BinWrappers/PosixLike/build -t GCC5 -a X64 -p OvmfPkg/OvmfPkgX64.dsc -n $(nproc) -b RELEASE -D FD_SIZE_2MB -D NETWORK_IP6_ENABLE -D TPM2_ENABLE -D SECURE_BOOT_ENABLE -D HTTP_BOOT_ENABLE -D TLS_ENABLE
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B

  install -Dm644 $B/Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd $P/usr/share/ovmf/x64/OVMF_CODE.fd
  install -Dm644 $B/Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd $P/usr/share/ovmf/x64/OVMF_VARS.fd
  install -Dm644 $W/60-edk2-ovmf-x86_64.json $P/usr/share/qemu/firmware/60-edk2-ovmf-x86_64.json
  ( cd $P/usr/share/ovmf/x64 && ln -v OVMF_VARS.fd OVMF_VARS.ms.fd )

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
