#!/bin/sh
##############################################################
pkgbase='lxc'
url="https://github.com/tenforward/lxc.git"
branch="plamo_template"
commitid="711467b9fe290aa5613b6f5992caba4e4c5776ec"
verify="${url}.asc"
arch=`uname -m`
build=B1
src="${pkgbase}"
OPT_CONFIG="--enable-shared --enable-static=no
            --with-runtime-path=/run
            --without-systemdsystemunitdir
            --enable-deprecated"
DOCS='AUTHORS COPYING ChangeLog INSTALL MAINTAINERS NEWS README'
patchfiles=''
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh

pushd $S
vers=$(git describe --tags)
vers=${vers#*-}
vers=${vers//-/_}
popd

pkg=$pkgbase-$vers-$arch-$build

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    if [ ! -d $src ]; then
        git clone $url
    fi
    cd $src
    git checkout master
    if [ -n $branch ]; then
        if git branch | grep $branch; then
            git checkout $branch
        else
            git checkout -b $branch origin/$branch
        fi
    fi
    git pull origin --tags
    if git branch | grep build; then
        git branch -D build
    fi
    if [ -n $commitid ]; then
        git checkout -b build $commitid
    fi
fi

if [ $opt_config -eq 1 ] ; then
  if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################
  cd $S
  for patch in $patchfiles ; do
    if [ ! -f .${patch} ]; then
      patch -p1 < $W/$patch
      touch .${patch}
    fi
  done
  if [ -f autogen.sh ] ; then
    sh ./autogen.sh
  fi
  if [ ! -f .init_script_patched ]; then
      sed -i -e 's/log_daemon_msg/log_info_msg/g' \
          -e '/@LIBEXECDIR@/a \ \ \ \ evaluate_retval' config/init/sysvinit/lxc-net.in
      sed -i -e 's/log_daemon_msg/log_info_msg/g' \
          -e '/@LIBEXECDIR@/a \ \ \ \ evaluate_retval' config/init/sysvinit/lxc-containers.in
      touch .init_script_patched
  fi

  cd $B
  export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
  export LDFLAGS='-Wl,--as-needed' 
  $S/configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --mandir='${prefix}'/share/man ${OPT_CONFIG}
    
  if [ $? != 0 ]; then
    echo "configure error. $0 script stop"
    exit 255
  fi
fi
    
if [ $opt_build -eq 1 ] ; then
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make -j1
  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make install DESTDIR=$P

  install -Dm644 -v $W/lxc-net $P/etc/sysconfig/lxc-net

  for i in $(seq 0 6)
  do
    install -dm755 -v $P/etc/rc.d/rc"$i".d
    case $i in
      0|1|6)
	ln -sfv ../init.d/lxc-net $P/etc/rc.d/rc"$i".d/K01lxc-net
	ln -sfv ../init.d/lxc $P/etc/rc.d/rc"$i".d/K01lxc
	;;
      2|3|4|5)
	ln -sfv ../init.d/lxc-net $P/etc/rc.d/rc"$i".d/S98lxc-net
	ln -sfv ../init.d/lxc $P/etc/rc.d/rc"$i".d/S99lxc
	;;
    esac
  done

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
